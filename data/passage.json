{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1640611259688742914",
        "title": "选择 C++ 还是 Java 语言？",
        "description": null,
        "content": "首先，明确一点，C++ 和 Java 都是非常优秀的主流编程语言，编程语言和技术没有绝对的优劣之分，只不过在不同的场景下，有更优的选择。而且，像很多大神说的一样，语言只是工具，编程思想才是核心。不过，选择好的工具也是至关重要的，“好的抓手才能带来更大的赋能”。\n\n很多大学是科班的同学应该都是先接触的 C++ 再学的 Java，那么我们到底把哪个语言作为主语言呢？\n\n鱼皮自己是选择了 Java，但是下面我会客观地分析一下这两个语言的特点和现状，给大家一些参考。\n\n\n## 语言对比\n\n### 语言特性\n\nJava 作为一门高级程序设计语言，拥有非常多的优秀特性，比如面向对象、简单性、分布性、解释性、健壮性、可移植性、高性能、多线程、安全性、动态性。当然，C++ 作为较底层的编程语言，也有众多优秀的特性，比如高性能、灵活等，但是在很多方面，Java 和 C++ 存在一定区别，使得 Java 更适合作为开发企业项目的首选语言。\n\n\n\n1.  简单性：Java 语言在继承了众多 C++ 语言的优点的同时，移除了 C++ 中学习成本高、易出错的指针、多重继承等概念，并且通过接口机制减少了类间关系的复杂度，学习成本更低。此外，Java 的语法结构和 API 也相对更简单、更丰富，使用更方便、开发效率更高。 \n2.  可移植性：跨平台可以说是 Java 最大的优点，Java 通过虚拟机执行，并不依赖固定的平台，使用 Java 开发的应用程序可以运行到任何操作系统，这对于企业中复杂多变的需求和架构场景尤为重要，一定程度上降低了开发和维护成本。 \n3.  健壮性：Java 语言的设计使得用它来编写高可靠软件变得相当容易，很多银行的电子交易系统、知名公司的大型电商系统、秒杀系统都是使用 Java 语言开发的。 \n4.  安全性：这里不是说使用 Java 就能比 C++ 更安全，而是因为 Java 自带的一些机制（比如垃圾回收）以及限制，使得很多由于程序设计不合理导致的问题能够被规避。 \n\n\n虽然因为 C++ 更偏底层（Java 都是 C++ 实现的），使得其性能通常是比 Java 高的，但在大多数公司的业务开发中，这些性能的提升对应用来说是微不足道的。\n\n\nC++  更适合开发一些计算类的程序（比如音视频处理 / 图像处理 / 游戏引擎）、高性能的后台程序（比如网络开发框架 / 轮子）、操作系统相关的程序等。\n\n\n我是在跟着学校学习了一段时间的 C++ 后，才主动自学了 Java。刚开始学习 Java 时，就被它更简单的语法深深吸引了。不需要自己去管理内存在应用开发中实在太爽太方便了，能够大大提升开发效率！\n\n\n\n### 语言生态\n\n由于 Java 具有的优秀特性、易上手、学习成本低等原因，使得 Java 的发展非常迅速，尤其是 Spring 等知名开发框架的崛起，进一步降低了企业应用的开发成本。\n\n\nC++ 虽然也有类似 Spring 之类的上层框架，但因为相对没有那么 “上层”，所以没有 Java 那么适合业务开发。\n\n\n在国内，越来越多开发者选择 Java，也因此涌现了很多 Java 技术交流社区，很多的问题都可以通过百度和社区询问来解决。而阿里巴巴作为国内超一流互联网公司，也选择了 Java 作为主要的后端领域编程语言，进一步推动了 Java 在国内的发展。\n\n\n有同学可能会说：“腾讯不是把 C++ 作为主语言么？”\n\n的确是这样没错，但毕竟腾讯是一家存活了 20 多年的公司了，很多 C++ 的代码其实都是老旧代码，对整个 C++ 社区生态的贡献也没那么大。\n\n\n\n### 应用场景\n\nJava 语言的优秀特性和繁荣生态，使得其非常适合企业级 Web 项目开发，在大数据分析处理、微服务、云计算、移动开发等领域也都处于领先地位。此外，Java 语言和 C++ 语言一样，也是可以应用到图像处理、桌面应用开发、分布式系统开发、嵌入式等近乎所有场景的。\n\n\n\n### 市场需求\n\n综合以上的种种因素，导致在国内 Java 软件工程师的需求量非常大，就业机会多。\n\n\n\n这和近年来中国在移动互联网这块发展迅猛有很大的关系。如今创业成本降低，越来越多的创业公司和中小型企业加入市场，因此对于网站、安卓 APP 等应用开发的需求变大。而 Java 作为国内企业开发的首选语言，自然更受欢迎，优秀的 Java 工程师的薪水也是非常诱人的！因此，我们要思考如何成为优质的 Java 开发者，而不是只会 CRUD（增删改查）的工具人。\n\n\n\n我曾经也想过做一名 C++ 程序员，但是后来查阅了网上的一些招聘数据，发现如今互联网公司在后台开发方面招的 Java 程序员明显更多一些。虽然大公司也会招 C++ 程序员，但整体来看，Java 会有更多的就业机会。这一点，相信大家按照平时看到的培训机构课程数和广告数就能看出来了。\n\n\n\n### 学习成本\n\nJava 的学习难度相对于 C++，以及其他的编程语言来说，算是很低的了。虽然 C++ 更底层、性能也很高，但是正因如此，涉及的系统层面的知识以及需要学习的概念也会更多，比如指针、内存管理、进程管理等，尤其是指针，对新手而言简直是噩梦！而学习 Java 时，你不需要自主管理内存，降低了很多出现 bug 的概率，即使没有对操作系统有深入的了解，也能写出比较健壮的程序。\n\n\n\n当然，这并不意味着你不需要学习操作系统、指针等底层知识，但如果时间有限，当你能够熟练开发 Java 应用后，再来补课也为时未晚。\n\n\n\n由于 Java 语言自身的优秀特性，再加上巨大的市场需求，使得学习 Java 的同学也非常多，促使越来越多的培训机构盯上了这块大蛋糕，像黑马、尚硅谷等等。因此，现在网上的 Java 教程非常非常多，关键还有超级多免费的优质学习资源。随便去 B 站一搜，就能找到一大堆。\n\n\n\n我的 Java 就是利用网上的资源完全自学的。先跟着网上的视频教程或文档，看一节敲一节，上手是比较轻松的。然后通过看《Java 核心技术卷 I》打实基础，再学习 SSM、SpringBoot 等框架来开发企业级项目，学习过程中多跟着视频敲代码、发挥想象做一些自己想做的项目，帮助我顺利找到了实习。再学习 SpringCloud 微服务框架以及 Redis、Zookeeper 等中间件，学会设计技术架构，用技术解决实际问题。在找工作前，再深入学习多线程高并发编程以及 JVM 底层原理，最终帮助我拿到了大厂 offer。\n\n\n\n## 如何选择？\n\n如果你对操作系统底层、图像处理、音视频处理、游戏等方向感兴趣，可以选择 C++；否则就无脑选择 Java。\n\n\n\n不过对于身在校园、且时间充裕的同学来说，我更建议 “我全都要”。可以先学 C 语言或 C++ 打基础（这也是大部分计算机专业学生在高校内学到的第一门编程语言），因为它相对底层，能帮助你接触到更多计算机的概念，比如操作系统资源管理、网络通讯等，从而为学习其他的编程语言做铺垫。然后再学习 Java 来做项目、找工作。\n\n\n此外，因为 Java 和 C++ 都可以作为后端开发语言，所以无论把哪门语言作为主语言，都要重点学好后台开发通用知识，比如数据库、缓存、消息队列、Socket 通讯、Linux、Git、计算机基础知识等。但选择 C++ 的同学要对操作系统、计算机网络和 Linux 更熟悉一些。",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 5,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T07:06:20.000+00:00",
        "updateTime": "2023-03-28T07:27:37.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习建议",
          "Java",
          "C++"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640589994284695553",
        "title": "Redis 学习路线 by 程序员鱼皮",
        "description": null,
        "content": "## 介绍\n\n很多同学第一次接触 Redis 可能都是因为 “缓存”，也有很多同学误以为 Redis 就是缓存、只能做缓存。\n\n事实上，Redis 是知名的高性能内存 K / V 存储系统，除了缓存之外，Redis 还可以用作配置存储、消息队列、解决分布式一致性问题等。正因为 Redis 的高性能、通用性、易用性、功能强大，使得它成为了后端开发中必不可少的中间件。\n\n只要你的学习方向是后端开发，就必须要系统地学习 Redis。不仅要学会应用到项目中，还要学习它优秀的系统设计以及实现原理，可以开拓我们开发程序、解决问题的思路。\n\n\n\n## 学习条件\n\n1. 目标方向是后端开发或数据库、数据开发相关的岗位（前端同学先不要学了）\n2. 先学完一套开发框架（比如 SSM、SpringBoot），再学习 Redis\n\n\n\n## 学习路线\n\n建议大家按照以下五个阶段来学习：\n\n1. 基础入门\n2. 实战应用\n3. 高阶知识\n4. 底层原理\n5. 备战面试\n\n\n\n### 大纲\n\n![](https://yupi-picture-1256524210.cos.ap-shanghai.myqcloud.com/1/FsRrZdVTeGfZTombMSuSbnog2jhs.png)\n\n\n\n## 学习资源\n\n### 1、入门教程（从这里开始）\n\n直接看这套视频课程即可一条龙入门：https://www.bilibili.com/video/BV1cr4y1671t\n\n几乎包括了 Redis 所有入门知识和主流应用、还有高级用法和原理的讲解，强烈推荐。\n\n除了视频学习之外，还可以配合《图解 Redis》文档食用：[https://xiaolincoding.com/redis/](https://xiaolincoding.com/redis)\n\n\n\n### 2、项目实战\n\nRedis 项目推荐及笔记：https://t.zsxq.com/07JMnQvne\n\n\n\n### 3、可视化工具\n\nRedis Insight：[https://redis.io/docs/stack/insight/](https://redis.io/docs/stack/insight)\n\nQuick Redis：https://quick123.net/\n\n\n\n\n\n### 4、命令手册\n\nRedis 官网命令集：https://redis.io/commands （命令忘了就查）\n\n中文版命令集：http://www.redis.cn/commands.html\n\n\n\n### 5、经典面试题\n\n视频 1：[https://www.bilibili.com/video/BV1Ni4y1Q7XM/](https://www.bilibili.com/video/BV1Ni4y1Q7XM)\n\n视频 2：https://www.bilibili.com/video/BV1BB4y1y7M2\n\n视频 3：https://www.bilibili.com/video/BV1it4y1W7D1\n\n常见面试题整理（by 小林）：https://xiaolincoding.com/redis/base/redis_interview.html\n\n\n\n## 学习建议\n\n1. Redis 是一个注重实际运用的技术，在学习 Redis 的过程中，要记得多敲命令 / 多写代码来操作 Redis，将 Redis 实际运用到你之前做过的项目中，而不是死记硬背。尤其是不要去背命令和代码，忘了就查、多写几次后印象自然就深刻了。\n2. 对于初学后端的同学来说，学完第二阶段（实战应用）后就可以再去学消息队列、微服务等其他知识了。等主流的后端开发技术都会用后、面试前再回过头来补高级知识和原理即可。\n3. Redis 的最佳实践部分要重点学习，建议是整理笔记便于自己复习查阅。争取养成好的设计和编码习惯，对以后的工作发展会很有帮助。\n\n\n\n\n\n\\---\n\n\n\n加油小伙伴们！",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 6,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:41:50.000+00:00",
        "updateTime": "2023-03-28T07:19:10.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "Redis",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640588753362108417",
        "title": "Git & GitHub 学习路线 by 程序员鱼皮",
        "description": null,
        "content": "## 介绍\n\n### Git / GitHub 是什么？\n\nGit 是目前最主流的 `分布式版本控制系统` （Version Control System），是团队协作开发不可或缺的工具。它可以保存和管理文件的所有更新记录、并且使用 **版本号** 进行区分。从而支持将编辑后的文档恢复到修改前的状态（历史版本）、对比不同版本的文件差异、防止旧版本覆盖新版本等功能。\n\nGtiHub 是目前最主流的、免费的 `代码开源托管平台` ，可以理解为一个存储和管理代码的 “网盘”。所有用户或团队都可以把自己的代码上传到 GitHub 进行共享和维护、从 GitHub 下载代码等。开发者们可以从 GitHub 上白嫖代码，进行学习或引用。\n\n很多同学刚开始容易把这两个概念搞混，其实很好区分，Git 和 GitHub 的区别和关系如下：\n\n1. Git 是工具，而 GitHub 是平台。\n2. 我们可以用 Git 之外的版本控制系统（比如 SVN）来向 GitHub 提交代码；同样可以用 Git 将代码提交到 GitHub 之外的其他代码托管平台（比如企业级代码托管平台 GitLab）上。\n\n\n\n> SVN 和 Git  是同类的工具，两者的用法很相似。但目前 Git 相对更主流一些，因此只学习 Git 足够了。\n\n\n\n### 为什么要用 Git / GitHub？\n\n#### Git\n\nGit 起初是由 Linux 的创始人 Linus Torvalds 为了更好地管理 Linux 内核开发而创立的。Linux 的内核开发极其复杂，我们可以试想一下，如果有 100 个人要共同来开发这样一个大型项目、维护同一个代码目录和文件，怎么样才能够保证大家的代码不重复、不冲突、即时共享呢？难道要把代码放到 U 盘里，每个人写完代码后再拷贝到别人电脑上么？\n\n肯定不行对吧，这样做不仅麻烦，而且只能人为去解决冲突，可能会出现下面的对话：\n\nA：“哎，这行我改了，你别改！”\n\nB：“TNND，你改了也不跟我说一声。”\n\n所以 Git 的出现正是为了解决上述难题。\n\n使用 Git 工具，大家可以很方便地拉取和提交代码、及时得到代码的修改信息、对比新老代码之间的差异等，让系统代替人工来自动检查和解决冲突。从而提高团队协作开发的效率，保证代码和项目的稳定推进。\n\n除了团队开发外，我们自己做项目时也可以用 Git 来管理代码，如果一不小心改错或者删除了文件，可以快速还原。\n\n因此 Git 也是目前开发岗同学 **必学** 的技能，企业开发的基本功。\n\n\n\n#### GitHub\n\n既然要团队协作开发，那么大家肯定要 **共享代码** ，在同一套代码的基础上进行开发。所以需要一个集中存储和管理代码的地方，所有团队成员都能访问到。而且不同于网盘，最好大家能使用 Git 工具来操作代码的上传和拉取，并且在平台上方便地浏览和对比代码。\n\n于是，有能力的公司开始自己建设公司内部的代码托管平台。但是对大多数小公司来说，他们没有这种条件自建，只能依赖其他大公司的代码托管服务。\n\n此外，在 Linux 之父以及很多优秀程序员的影响下，越来越多的程序员倡导 **开源** ，认为软件开发应当是开放的，所有开发者都可以加入贡献。而开源的背后，必须要有一个开放共享的代码托管平台来支撑，而不是每个公司的代码都被封闭在自己内部的平台上。\n\n于是，以 GitHub 为代表的代码托管平台出现了。团队可以利用 GitHub 进行协作开发；开发者可以轻松阅读并参与到世界知名的开源项目中；我们每位同学也都可以免费使用 GitHub 上的代码，站在巨人的肩膀上打造自己的项目，或者通过参与开源来提升个人影响力等。\n\n此外，如今的 GitHub 还提供了更多强大的功能，比如问题讨论、在线编程、托管网站、自动构建项目等，对开发者非常有帮助。除了代码外，鱼皮也经常把一些需要团队内共享的文档上传到 GitHub 私仓和其他成员协作，免费无限制谁不爱呢？\n\n当然，GitHub 只是代码托管平台中最有代表性的一个，其他知名的代码开源托管平台有国内的 Gitee、国外的 Bitbucket 等；面向企业的私有代码托管平台有 GitLab、腾讯工蜂等。它们没有什么本质的区别，都是平台而已，会用 GitHub，就会用其他的。\n\n综上，强烈建议大家养成使用 GitHub 的习惯，感受开源的魅力。\n\n\n\n## 学习条件\n\n1. 学过至少一门编程语言后就可以学习 Git 了\n2. 准备开发个人完整项目前建议学习。注意是完整项目，还停留在初学编程语言写练习阶段的同学先不用学，抓紧熟悉编程语言就好。\n3. 正式找工作前必须学习！\n\n\n\n## 学习建议\n\n1. Git 只是工具，学 Git 的时候可以轻松一些，千万不要去背命令！初学者只要先了解工作中常用命令的作用、提交代码的流程，然后跟着教程实操一遍，有个大致的印象就够了。忘了的话就掏出说明书（百度 / 文档等），随用随查即可。因此建议将专门学习 Git 的时间控制在 1 天内，一般几个小时就足够了，最快的话只用十几分钟也能上手。\n2. 虽然现在有很多傻瓜式可视化 Git 工具，但还是建议初学 Git 的同学多自己手敲 Git 命令，可以多把自己平时写的练习代码用 Git 上传到 GitHub 上管理，用的多了自然就熟悉了。\n3. Git 的学习不是一蹴而就的。随着你使用 Git 管理的项目越来越多、工作经验越来越丰富，你对 Git 和 GitHub 的熟练程度才会越来越高。总之，想学好 Git，实践是关键。\n\n\n\n## 学习路线\n\n⭐️ - 重点知识 / 强烈推荐\n\n\uD83D\uDE10 - 了解即可\n\n\n\n### 大纲\n\n![Git & GitHub 学习路线 by 程序员鱼皮](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1/Git%20&%20GitHub%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png)\n\n\n\n### 零、无痛上手\n\nGit 本身只是一个工具，不涉及太多复杂的的理论知识，看了说明书就能用；再加上现在很多主流的开发工具都支持可视化地操作 Git 来管理项目，将它的使用成本降到了最低。所以我们可以随用随学，哪怕之前完全不会，工作用到时也可以直接 **赶鸭子上架** ，做到能用界面来拉取和提交代码、完成开发即可。\n\n我自己刚开始接触 Git 的时候就是这样，完全没有上网搜教程，就是看别人提交项目的时候用到了这个工具、在编辑器上点几下就可以了，觉得很厉害很方便。然后我就有样学样地用起了这个工具，而且很长一段时间我都是用 GitHub Desktop 来傻瓜式的操作，遇到问题了再上网搜解决方案。\n\n这里我建议大家无论是否要学习 Git，都可以先把它安装到你的电脑中（直接去官网安装）。因为有可能一些软件或工具会依赖 Git，不装的话后面会出现一些问题。\n\n\n\n#### 目标\n\n1. 能用软件操作 Git 来拉取和提交代码\n\n\n\n#### 资源\n\n⭐️ Git 官方下载：https://git-scm.com/downloads\n\nGit 可视化管理软件：\n\n> 一般情况下不用额外安装软件，用开发工具自带的 Git 可视化功能即可（比如 IDEA、VS Code 等）\n\n- ⭐️ GitKraken：https://www.gitkraken.com/（炫酷且友好）\n- Sourcetree：https://www.sourcetreeapp.com/\n- TortoiseGit：https://tortoisegit.org/\n- GitHub Desktop：https://desktop.github.com/\n- Git GUI（安装 Git 后自带）\n\n\n\n### 一、Git 基础\n\n虽然使用可视化工具也可以操作 Git 完成开发工作，但如果不了解 Git 的概念和每个操作具体做了什么，在团队开发中很容易出现问题（比如出现冲突）。\n\n因此本阶段的目标如下：\n\n\n\n#### 目标\n\n1. 了解 Git 基本概念和常用命令的作用（理论）\n2. 能够使用 Git 命令来管理和提交项目代码（实践）\n\n\n\n#### 知识点\n\n- ⭐️ 基本概念\n  - 什么是 Git（版本控制系统）\n  - 什么是 GitHub（代码托管平台）\n  - Git 和 GitHub 的作用\n  - Git 和 GitHub 的联系与区别\n- ⭐️ Git 概念\n  - 工作区\n  - 暂存区（索引）\n  - 本地版本库\n  - 远程仓库\n  - Git 文件状态\n  - 版本\n  - HEAD\n  - 分支\n- Git 的安装\n- Git 常见配置（git config）\n  - 修改配置\n    - 个人信息\n  - 查看配置\n- ⭐️ Git 基本操作（开发流程）\n  - 初始化仓库（git init）\n  - 克隆（git clone）\n  - 暂存（git add）\n  - 提交（git commit）\n  - 推送（git push）\n  - 拉取（git fetch）\n  - 拉取合并（git pull）\n  - \uD83D\uDE10 查看状态（git status）\n  - \uD83D\uDE10 查看历史（git log）\n- ⭐️ 分支操作\n  - 创建分支\n  - 查看分支\n  - 切换分支\n  - 删除分支\n  - 合并分支（git merge）\n\n\n\n#### 学习方法\n\n入门 Git 时没必要买书，而是直接看网上的文档或视频教程，大概花几分钟 ~ 几小时就可以入门了。\n\n比如 [猴子都能懂的 Git 入门](https://backlog.com/git-tutorial/cn/) ，图文并茂、通俗易懂，看完入门篇就足够了：\n\n![](/Users/yupi/Downloads/image-20220623195749271.png)\n\n或者看 B 站上一些免费的分享，比如下面资源里提到的一节课入门视频，可以帮助你快速了解 Git。\n\n但是大家要切记，**一定要跟着教程敲命令** ，自己走完一套从新建文件到提交文件的完整流程！\n\n还可以配合可视化工具来观察每个命令执行带来的效果，比如 IDEA 会自动把 Git 托管的文件变成绿色，从而帮助你理解每个命令的作用。\n\nGit 的分支概念还是很重要的，大家可以使用 [Learning Git Branching](https://learngitbranching.js.org/?locale=zh_CN) 这个在线游戏来学习和理解分支。\n\n> 当然，习惯阅读官方文档的同学也可以直接看 Git 官方文档入门。\n\n\n\n#### 资源\n\n在线文档：\n\n- ⭐️ 猴子都能懂的 Git 入门：https://backlog.com/git-tutorial/cn/（强烈推荐）\n- 菜鸟教程：https://www.runoob.com/git/git-tutorial.html\n- 廖雪峰的教程：https://www.liaoxuefeng.com/wiki/896043488029600/\n- Git 简明指南：http://rogerdudler.github.io/git-guide/index.zh.html（几分钟看一遍就好，可以用来复习）\n\n视频教程：\n\n> Git 相关的入门视频太多了，B 站随便一搜一大把\n\n- 一节课入门：https://www.bilibili.com/video/BV1s3411g7PS（18 分钟）\n- 一节课入门：https://www.bilibili.com/video/BV1KD4y1S7FL（10 分钟）\n- 5h 打通 Git 全套教程：https://www.bilibili.com/video/BV1vy4y1s7k6（较完整，时间多的话可以看）\n\n在线游戏：\n\n- ⭐️ Learning Git Branching：https://learngitbranching.js.org/?locale=zh_CN（帮助你学习 Git 分支的用法）\n\n工具：\n\n- ⭐️ Git 命令大全：https://backlog.com/git-tutorial/cn/reference/（适合收藏）\n- Git 参考手册：http://gitref.justjavac.com/（只列举了常用的命令，不是很全）\n\n\n\n### 二、GitHub 基础\n\n可以把 GitHub 简单理解为一个资源网站，第一次接触 GitHub 时直接注册一个账号，然后在搜索框里输入你想搜的东西就可以了，不需要任何的教程。但是如果我们想上传代码到 GitHub、更好地用它来管理项目，还是有必要了解一下平台的玩法。\n\n\n\n#### 目标\n\n1. 熟悉 GitHub 基本操作，并能够使用 GitHub 来管理代码\n2. 了解如何利用 GitHub 搜索和下载项目代码\n3. 了解 GitHub 协作流程；了解开源，并能向开源项目提交代码\n\n\n\n#### 知识点\n\n- 什么是 GitHub？\n\n- ⭐️ 如何访问 GitHub？\n\n- ⭐️ 基本概念\n\n  - 仓库\n  - 分支\n    - 主分支\n  - README\n  - Star\n  - Follow\n  - 账户类型（个人 / 组织）\n\n- 必备操作\n\n  - ⭐️ 搜索仓库 / 代码\n\n  - 创建仓库\n\n    - 公开\n\n    - 私有\n\n  - Fork 仓库\n\n  - Watch 仓库\n\n  - ⭐️ 上传本地代码\n\n  - 修改个人信息\n\n- ⭐️ GitHub Flow 协作流程\n\n  - 克隆 / Fork 仓库\n  - 创建分支\n  - 修改代码\n  - 发起 Pull Request\n  - Code Review\n  - Merge 分支\n  - 删除分支\n\n- ⭐️ 了解 GitHub Issues\n\n- ⭐️ 贡献代码流程\n\n\n\n#### 学习方法\n\n我们学 GitHub 时主要是了解这个平台提交代码的规则以及和他人协作的方法，因此还是以实践为主。\n\n推荐先在 B 站上找一个 GitHub 的短视频分享，了解下 GitHub 是个啥，大概咋用（下面有推荐视频）。然后再按照 GitHub  官方提供的 [Hello World 入门教程](https://docs.github.com/cn/get-started/quickstart/hello-world) 来实操一遍流程，基本就了解大家是如何在 GitHub 上协作的了。\n\n之后我建议大家可以像读课外书一样阅读下 [《GitHub 漫游指南》](https://github.phodal.com/) ，能够比较全面地加深你对 GitHub 的了解。\n\n\n\n#### 资源\n\n文档：\n\n- ⭐️ GitHub 官方 Hello World 入门：https://docs.github.com/cn/get-started/quickstart/hello-world（带你体验一次完整的 GitHub 开发流程）\n- ⭐️ GitHub 漫游指南：https://github.phodal.com/（很多作者个人的实战经验，建议当课外书读，受益匪浅）\n- ⭐️ 教你给开源项目贡献代码：https://github.com/firstcontributions/first-contributions/blob/master/translations/README.chs.md\n- ⭐️ 开源指北：https://oschina.gitee.io/opensource-guide/（给开源新手的保姆级开源百科，建议当课外书读）\n\n视频：\n\n- 一节课入门：https://www.bilibili.com/video/BV1hS4y1S7wL\n- 5 分钟入门：https://www.bilibili.com/video/BV1hS4y1S7wL\n- 如何利用 GitHub 找到优质项目：https://www.bilibili.com/video/BV1Ki4y1T7Cu（鱼皮早期作品，特么青涩！）\n\n工具：\n\n- ⭐️ 如何更快地访问 GitHub：https://github.com/dotnetcore/FastGithub（进不去可以自行百度：fast github）\n- ⭐️ GitHub 备忘清单：https://training.github.com/downloads/zh_CN/github-git-cheat-sheet/（包含了常用命令）\n\n\n\n### 三、Git 进阶\n\n企业开发项目可能会比较复杂，往往会面临两个问题：\n\n1. 项目更大，更难管理\n2. 协作人员更多，更容易出现冲突\n\n如果协作开发时出现了代码冲突，又不了解如何解决的话，就很可能导致提交了错误的代码影响项目，或者丢失自己写过的代码。\n\n因此我们需要进一步了解 Git，学习实际工作中可能要用到的操作、经验和技巧，更好地管理团队项目和协作。\n\n\n\n#### 目标\n\n1. 学习 Git 高级操作，尤其是能够熟练地规避和解决冲突\n2. 了解企业常用的 Git 协作流程和规范，能独立管理项目\n\n\n\n#### 知识点\n\n- 高级操作\n  - 标签（git tag）\n  - 检出（git checkout）\n  - ⭐️ 贮藏（git stash）\n  - 清理（git clean）\n  - 变基（git rebase）\n  - 重置（git reset）\n  - 还原（git revert）\n  - \uD83D\uDE10 检索（git grep）\n  - \uD83D\uDE10 展示差异（git diff）\n  - \uD83D\uDE10 溯源（git blame）\n  - \uD83D\uDE10 参考日志（git reflog）\n  - \uD83D\uDE10 交互式命令行（-i 参数）\n- ⭐️ 预防冲突\n- ⭐️ 解决冲突（重中之重）\n- ⭐️ 配置 SSH\n- 子模块\n- Git 钩子\n  - 提交钩子（pre-commit）\n- ⭐️ 忽略提交（Gitignore）\n- ⭐️ cherry-pick\n- 分布式工作流程\n- Git worktree\n- Git Flow\n- \uD83D\uDE10 Git 内部原理\n- Monorepo\n- 了解其他版本控制系统，和 Git 对比\n\n\n\n#### 学习方法\n\n其实我们在大多数情况下是用不到上面那些高级命令的，但是一定要知道有这么个命令和用法，在关键时刻才能想起来，然后再去通过官方文档和百度去搜详情即可。\n\n所以，建议大家有空完整地阅读一遍 Git 的官方文档（支持中文、详细又权威），有些地方看不懂或记不住也没关系（比如像 reset 的几种模式），有个大致的印象就行。\n\n学好 Git 最主要的方法还是多实操，比如实际工作中最实用的技能之一 —— 解决代码冲突，只有经历过的同学才会懂。不过如今的编辑器基本都自带了可视化解决冲突的功能，通过红绿等颜色来区分代码，可比我们用命令行要方便和清晰多了，所以也不用去记忆相关的命令。\n\n另外，建议大家去网上了解一下企业开发中常用的 Git 协作机制，比如怎么定义分支、怎么个提交代码的流程等，如图：\n\n![](/Users/yupi/Downloads/good.png)\n\n还可以了解一些 “先进” 的协作方式，比如一些大公司在采用的 Monorepo（单仓 / 大仓）方案，了解它和传统项目管理模式的优缺点。\n\n此外，大家感兴趣的话也可以深入下 Git 工具的原理，如果能够自己做出一个类似的系统，相信在简历上也会是个不错的项目~\n\n\n\n#### 资源\n\n- ⭐️ Git 官方文档：https://git-scm.com/book/zh/v2（强烈推荐，有图有文，全面详细）\n- Git Flow 演示学习：http://danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html\n- Git Flow 学习：https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow\n- Monorepo 学习：https://www.jianshu.com/p/c10d0b8c5581\n\n工具：\n\n- Git 中文开发手册：https://www.php.cn/manual/view/34943.html（可以用来查命令）\n\n\n\n### 四、GitHub 进阶\n\n如今 GitHub 的能力已经非常强了，除了代码的管理和检索外，它还集成了各种辅助团队开发和运营的功能。\n\n\n\n#### 目标\n\n1. 按需学习更多 GitHub 功能，提升研发效率、更好地管理项目\n2. 尝试用心维护和推广自己的 GitHub 项目\n\n\n\n#### 知识点\n\n- 开发\n  - ⭐️ 配置 SSH 拉取\n  - \uD83D\uDE10 GitHub 快捷键\n  - \uD83D\uDE10 GitHub 命令面板\n  - \uD83D\uDE10 GitHub Apps\n  - 代码安全\n- 协作\n  - ⭐️ GitHub Codespaces\n  - GitHub Discussions\n  - Pull Requests\n- 项目管理\n  - Organizations 组织\n  - GitHub Issues 问题反馈\n  - \uD83D\uDE10 GitHub Projects 项目管理\n  - Insights 数据分析\n  - 贡献者管理\n  - 开源协议\n- DevOps\n  - ⭐️ GitHub Pages 网站托管\n  - Gitpod 代码托管\n  - GitHub Actions\n  - \uD83D\uDE10 GitHub Packages\n  - GitHub Webhook\n- \uD83D\uDE10 Git 私服搭建\n  - GitLab\n  - Gogs\n\n\n\n#### 学习方法\n\n进阶 GitHub 最好的方式就是 **阅读官方文档** ！\n\n因为首先官方文档通常比任何教程都 **全面、权威、准确** ；再加上 GitHub 的更新迭代很快、时不时会推出一些新功能，导致网上的教程和文章很难做到实时和官方同步。\n\n而 GitHub 的官方文档不仅支持中文，而且写的非常通俗好懂，本身就是一个贴心的教程了。所以建议大家跟着文档来学习，完整阅读一遍后，相信你会学到很多之前完全没关注过的 GitHub 功能，帮助自己更好地利用这个平台。\n\n此外，大家也可以多看一些其他同学分享的 GitHub 小技巧，比如我之前分享过的：按句号键就能用 web 编辑器直接打开项目，从而给我们带来极大的方便。（下面也给大家列举了一些我之前分享过的 GitHub 骚操作）\n\n\n\n#### 资源\n\n文档：\n\n- ⭐️ GitHub 官方文档：https://docs.github.com/cn\n- ⭐️ GitHub 秘籍：https://snowdream86.gitbooks.io/github-cheat-sheet/content/zh/（收录了一些 Git 和 Github 非常酷同时又少有人知的功能）\n- ⭐️ GitHub 隐藏技巧：https://www.bilibili.com/video/BV1q54y1f7h6\n- 让你的 GitHub 秒变高大上：https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247491908&idx=1&sn=568e8c0dcb54a610d886eb992d424273&scene=21#wechat_redirect\n- GitHub 骚操作：https://mp.weixin.qq.com/s?__biz=MzI1NDczNTAwMA==&mid=2247495440&idx=1&sn=99147cdcb7c881c9d983e7b2373abcdb&scene=21#wechat_redirect\n\n工具：\n\n- GitHub 快捷键：https://docs.github.com/cn/get-started/using-github/keyboard-shortcuts\n- GitHub 命令面板：https://docs.github.com/cn/get-started/using-github/github-command-palette\n\n\n\n## 面试考点\n\n其实 Git 在面试中的占比一般是很低的，大家也不需要刻意地准备，多去用它、积累经验就好了。\n\n不过时间足够的同学也可以了解一下常见的面试题，比如下面这些：\n\n\n\n#### 理论\n\n1. 简述 Git 的原理和工作流程\n2. 什么是版本控制系统？为什么需要版本控制系统？\n3. git fetch 和 git pull 命令的区别？\n4. git rebase 和 git merge 命令的区别？\n5. 什么是 Git Flow，它有什么好处？\n6. 什么是暂存区？Git 为什么需要暂存区？\n\n\n\n#### 实践\n\n1. 分享下你在团队中使用 Git 协作开发的流程（从拉取项目到上线）\n2. 如何控制某些文件不被提交？\n3. 什么情况下提交会冲突，如何解决冲突？\n4. 不小心改错了代码、删除了文件，如何恢复？\n5. 不小心提交错了文件，如何撤销？\n6. 团队开发中，如何区分和管理分支？\n7. 如果让你负责团队，会怎么管理项目的代码？\n8. 如何防止错误的代码提交？\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 0,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:36:54.000+00:00",
        "updateTime": "2023-03-28T05:37:05.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "Git",
          "GitHub",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640588392073150465",
        "title": "设计模式学习路线 by 程序员鱼皮",
        "description": null,
        "content": "## 介绍\n\n大家有没有思考过如下几个问题？\n\n- 同样都是写代码，为什么有些同学的思路清晰、代码整洁；而我的代码却充满了重复和混乱，每次要修改时都无从下手、Bug 一堆？\n- 如何写代码，才能使得项目易于扩展和维护？\n- 我每天都在写重复的代码，如何提升水平？\n- 为什么我读不懂大佬写的源码？是不是缺少了什么知识？\n\n如果存在上述问题，那么我们一定要学习软件开发中的重要技能 —— 设计模式。\n\n设计模式是软件开发人员在软件开发过程中面临的一般问题的 **通用** 解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。\n\n通俗地说就是前辈们在写代码时摸索出了一些不错的方法，可以用于解决一类问题、更好地开发和维护项目。于是其他软件开发者纷纷效仿，久而久之，就得出了一套优秀的软件开发方法总结。\n\n目前最为经典的设计模式有 23 种，学习之后，不仅能帮助我们开拓思路、写出更优质的代码、提高项目的开发和维护效率；还能够帮助我们更好地阅读和理解源码，甚至可以根据文件名称直接推断出源码的架构设计（有点行话的感觉）！因此，在准备阅读框架源码前，强烈建议先学习设计模式。\n\n此外，设计模式也是软件开发相关岗位面试的重点（尤其是大厂、后端开发岗位），建议大家有时间的话都要学习。\n\n\n\n## 问题\n\nQ：前端要不要学设计模式？\n\nA：先学习基础的界面开发、组件库和框架的使用，之后可以将设计模式作为进阶知识来学习，想进大厂建议学习。毕竟设计模式是软件开发的通用思想 / 技能，独立于编程语言。\n\n\n\n## 学习条件\n\n1. 至少学过一门编程语言（学设计模式时需要多写代码实践）\n2. 使用过至少一门开发框架（这样在学习设计模式的时候能够和框架的设计结合起来，更好理解）\n\n\n\n## 大纲\n\n![设计模式学习路线 by 程序员鱼皮](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png)\n\n\n\n## 知识\n\n- 软件开发原则\n  - 单一职责原则（SRP）\n  - 开闭原则（OCP）\n  - 里氏替换原则（LSP）\n  - 依赖倒置原则（DIP）\n  - 接口隔离原则（ISP）\n  - 迪米特法则（最少知道原则）\n  - 合成 / 聚合复用原则（CARP）\n\n- 设计模式分类\n  - 根据作用范围：类 / 对象模式\n  - 根据目的分类：创建型 / 结构型 / 行为型模式\n\n- 创建型模式：如何创建对象\n  - 单例模式（懒汉式、饿汉式、双检锁、线程唯一单例）\n  - 工厂方法模式（类）\n  - 抽象工厂模式\n  - 建造者模式\n  - 原型模式\n- 结构型模式：如何将类或对象结合在一起形成一个更强大的结构\n  - 适配器模式（类 / 对象）\n  - 组合模式\n  - 装饰器模式\n  - 代理模式\n  - 享元模式\n  - 外观模式\n  - 桥接模式\n- 行为型模式：类或对象间如何交互、如何划分职责，从而更好地完成任务\n  - 迭代器模式\n  - 模板方法模式（类）\n  - 策略模式\n  - 命令模式\n  - 状态模式\n  - 责任链模式\n  - 备忘录模式\n  - 观察者模式\n  - 访问者模式\n  - 中介者模式\n  - 解释器模式（类）\n\n\n\n### 知识表\n\n> 表格来源： [schips](https://home.cnblogs.com/u/schips/)\n\n| 设计模式 | 适用层次       | 引入时机       | 复杂度 | 变化               | 实现                     | 体现的原则   |\n| -------- | -------------- | -------------- | ------ | ------------------ | ------------------------ | ------------ |\n| 工厂方法 | 代码级         | 编码时         | 简单   | 子类的实例化       | 对象的创建工作延迟到子类 | 开闭原则     |\n| 单例     | 代码级、应用级 | 设计时、编码时 | 简单   | 唯一实例           | 封装对象产生的个数       |              |\n| 门面     | 应用级、构架级 | 设计时、编码时 | 简单   | 子系统的高层接口   | 封装子系统               | 开闭原则     |\n| 模板方法 | 代码级         | 编码时、重构时 | 简单   | 算法子步骤的变化   | 封装算法结构             | 依赖倒置原则 |\n| 抽象工厂 | 应用级         | 设计时         | 较复杂 | 产品家族的扩展     | 封装产品族系列内容的创建 | 开闭原则     |\n| 组合     | 代码级         | 编码时、重构时 | 较复杂 | 复杂对象接口的统一 | 统一复杂对象的接口       | 里氏代换原则 |\n| 代理     | 应用级、构架级 | 设计时、编码时 | 简单   | 对象访问的变化     | 封装对象的访问过程       | 里氏代换原则 |\n| 命令     | 应用级         | 设计时、编码时 | 较简单 | 请求的变化         | 封装行为对对象           | 开闭原则     |\n| 观察者   | 应用级、构架级 | 设计时、编码时 | 较简单 | 通讯对象的变化     | 封装对象通知             | 开闭原则     |\n| 策略     | 应用级         | 设计时         | 一般   | 算法的变化         | 封装算法                 | 里氏代换原则 |\n| 建造者   | 代码级         | 编码时         | 一般   | 对象组建的变化     | 封装对象的组建过程       | 开闭原则     |\n| Adapter  | 代码级         | 重构时         | 一般   | 对象接口的变化     | 接口的转换               |              |\n| 桥接     | 代码级         | 设计时、编码时 | 一般   | 对象的多维度变化   | 分离接口以及实现         | 开闭原则     |\n| 装饰器   | 代码级         | 重构时         | 较复杂 | 对象的组合职责     | 在稳定接口上扩展         | 开闭原则     |\n| 迭代器   | 代码级、应用级 | 编码时、重构时 | 较简单 | 对象内部集合的变化 | 封装对象内部集合的使用   | 单一职责原则 |\n| 中介者   | 应用级、构架级 | 编码时、重构时 | 一般   | 对象交互的变化     | 封装对象间的交互         | 开闭原则     |\n| 备忘录   | 代码级         | 编码时         | 较简单 | 状态的辅助保存     | 封装对象状态的变化       | 接口隔离原则 |\n| 状态     | 应用级         | 设计时、编码时 | 一般   | 对象状态的变化     | 封装与状态相关的行为     | 单一职责原则 |\n| 访问者   | 应用级         | 设计时         | 较复杂 | 对象操作变化       | 封装对象操作变化         | 开闭原则     |\n| 原型     | 应用级         | 编码时、重构时 | 较简单 | 实例化的类         | 封装对原型的拷贝         | 依赖倒置原则 |\n| 享元     | 代码级、应用级 | 设计时         | 一般   | 系统开销的优化     | 封装对象的获取           |              |\n| 责任链   | 应用级、构架级 | 设计时、编码时 | 较复杂 | 对象的请求过程     | 封装对象的责任范围       |              |\n| 解释器   | 应用级         | 设计时         | 较复杂 | 领域问题的变化     | 封装特定领域的变化       |              |\n\n\n\n除了这 23 种主流设计模式外，还有一些其他设计模式，比如 Immutable 不可变模式等，了解即可。\n\n\n\n## 学习建议\n\n1. 对设计模式的学习和其他知识一样，先了解每种设计模式是什么？作用是什么？能够解决什么问题？适用于什么场景？有什么特点？类和对象的关系是什么（建议结合 UML 类图来理解）？再去考虑编码实现和进一步在项目中应用。\n2. 一定要多写代码实践，最好每个设计模式都实现一遍，不要去背代码，用的多了自然就能写出代码了。\n3. 每个设计模式都可以 **独立学习** ，互相之间联系不大，因此可以根据自己的时间来选择性学习（比如先学重点的单例模式）。\n4. 在学会基础的设计模式后，可以分析之前学过的框架源码（比如 Spring、MyBatis 等），参考别人是如何应用设计模式的。\n5. **不要过度依赖设计模式！！！！！！** 它并不是银弹，过分使用设计模式可能只会增加系统的复杂度。\n\n\n\n## 学习路线\n\n主流的设计模式共有 23 种，建议大家按照以下四个阶段来学习：\n\n1. 基础学习\n2. 编码实现\n3. 项目实战\n4. 备战面试\n\n\n\n其中第一个阶段和第二个阶段 **可以同时进行** ，即对于每个设计模式的学习都是：先了解、再编码实现。\n\n\n\n### 一、基础学习\n\n本阶段的目标：依次了解每一种设计模式的应用场景、特点、UML 类图，能够对设计模式有个基础的印象。\n\n\n\n#### 学习顺序\n\n根据使用频率、难易度、面试考察率等综合排序，仅供参考，并不绝对！\n\n优先：\n\n1. 单例模式\n2. 工厂方法模式\n3. 迭代器模式\n4. 策略模式\n5. 建造者模式\n6. 模板方法模式\n7. 代理模式\n8. 责任链模式\n9. 抽象工厂模式\n10. 适配器模式\n11. 观察者模式\n12. 外观模式\n\n一般：\n\n1. 桥接模式\n2. 组合模式\n3. 装饰器模式\n4. 状态模式\n5. 访问者模式\n6. 中介者模式\n7. 命令模式\n8. 备忘录模式\n\n低优先：\n\n1. 原型模式\n2. 享元模式\n3. 解释器模式\n\n\n\n#### 推荐资源\n\n> 以下资源看 1 - 2 个就足够入门了\n\n- 书籍\n  - 《图解设计模式》：https://www.aliyundrive.com/s/jcQugLGNs1V 提取码: 5i9c（强烈推荐，用 Java 语言实现，图多、有示例代码、有习题和答案，很不错）\n  - 《大话设计模式》：https://www.aliyundrive.com/s/73jZWnfAtaA 提取码: 9gc7（比较有趣）\n  - 《Head First 设计模式》：https://www.aliyundrive.com/s/GnuQcruh7Us 提取码: 9gc7\n  - 《设计模式：可复用面向对象软件的基础》：https://www.aliyundrive.com/s/T9ECaPtxzg4 提取码: 9gc7（大黑书，难度较大，有能力和时间才去读）\n  - 《JavaScript 设计模式与开发实践》：https://www.aliyundrive.com/s/tzcZCU8bqnR 提取码: 9gc7（适合前端同学阅读）\n  - 《Python 设计模式》：https://www.aliyundrive.com/s/3RNoX31XqUy 提取码: 9gc7\n- 视频\n  - 尚硅谷图解 Java 设计模式：https://www.bilibili.com/video/BV1G4411c7N4 （讲的很棒也很全面，也和一些主流框架相结合，系统学习 Java 的同学可以看）\n  - 五分钟学设计模式：https://www.bilibili.com/video/BV1af4y1y7sS （小短快科普，比较轻松）\n  - 黑马程序员Java设计模式详解：https://www.bilibili.com/video/BV1Np4y1z7BU （很完整，最后讲解了 Spring 框架的部分设计）\n  - 用一个项目讲解 23 种设计模式：https://www.bilibili.com/video/BV19g411N7yx （和项目结合，思路不错，但其中有一些直播翻车，可部分跳过）\n- 文档\n  - 菜鸟教程：https://www.runoob.com/design-pattern/design-pattern-tutorial.html （还是比较推荐的，学过设计模式后如果忘记了，可以查看这个文档快速补回来）\n  - C++ 图说设计模式：https://design-patterns.readthedocs.io/zh_CN/latest/\n  - Go 语言设计模式系列博客：https://lailin.xyz/post/singleton.html\n\n\n\n### 二、编码实现\n\n本阶段的目标：依次编码实现每个设计模式，用任何支持面向对象的编程语言都可以，最好能够独立（不借助任何资料）从 0 写出每个设计模式的代码。\n\n\n\n#### 资源\n\n一些源码示例，仅供参考，更多的内容可以直接在 GitHub 搜索关键词 `Design Pattern` 或 `设计模式` ：\n\n- 各语言设计模式示例代码：https://github.com/wx-chevalier/design-pattern-examples\n- Java 23 种设计模式全归纳：https://github.com/youlookwhat/DesignPattern （教程 + 源码）\n- C++ 设计模式源码：https://github.com/liu-jianhao/Cpp-Design-Patterns （设计模式介绍 + 源码）\n- JavaScript 示例代码：\n  - https://github.com/wchaowu/javascript\n  - https://github.com/zy445566/design-pattern-in-javascript\n- Python 示例代码：\n  - https://github.com/wklken/py-patterns\n- Go 示例代码\n  - https://github.com/mohuishou/go-design-pattern\n\n\n\n### 三、项目实战\n\n本阶段的目标：通过做项目或阅读项目源码来进一步强化每个设计模式的实际应用。做到能根据某个场景主动选出合适的设计模式来优化代码、灵活运用，并且能够通过文件命名、项目目录结构等途径来快速判断出某个框架是否使用了设计模式。\n\n可以先通过一个视频了解设计模式的实际应用：\n\n- 实际工作中，如何运用 Java 设计模式：https://www.bilibili.com/video/BV1tK4y1s7Uo\n\n\n\n列举一些设计模式在框架源码中的应用：\n\n> 部分内容源于网络\n\n- Spring\n  - 工厂模式：通过 BeanFactory 和 ApplicationContext 来创建对象\n  - 单例模式：Spring Bean 默认为单例模式\n  - 策略模式：例如 Resource 的实现类，针对不同的资源文件，实现了不同方式的资源获取策略\n  - 代理模式：Spring 的 AOP 功能用到了 JDK 的动态代理和 CGLIB 字节码生成技术\n  - 模板方法：可以将相同部分的代码放在父类中，而将不同的代码放入不同的子类中，用来解决代码重复的问题。比如RestTemplate、JmsTemplate、JpaTemplate\n  - 适配器模式：Spring AOP 的增强或通知（Advice）使用到了适配器模式\n  - 观察者模式：Spring 事件驱动模型\n  - 桥接模式：可以根据客户的需求能够动态切换不同的数据源。比如我们的项目需要连接多个数据库，客户在每次访问中根据需要会去访问不同的数据库\n- Spring MVC\n  - 组合模式：WebMvcConfigurerComposite，树枝和树叶都实现了相同的抽象类或接口 WebMvcConfigurer\n  - 责任链模式：DispatcherServlet 依次拦截和处理请求\n  - 适配器模式：HandlerAdapter 处理器适配\n- MyBatis（参考：https://blog.csdn.net/aha_jasper/article/details/108701785 ）\n  - Builder + Factory 模式：创建 SqlSession 工厂和 SqlSession\n  - 模板方法模式：BaseExecutor 定义执行器基本流程\n  - 解释器模式：SqlNode 动态解析 SQL\n  - 单例模式：ErrorContext 线程唯一\n  - 装饰器模式：Cache 的实现用组合而非继承实现更灵活地缓存方式结合\n  - 迭代器模式：PropertyTokenizer 利用迭代器模式实现属性解析器\n  - 适配器模式：Log 适配不同的日志框架\n- Google Guava（参考：https://blog.csdn.net/aha_jasper/article/details/108695561 ）\n  - Builder 模式：更方便地构建内存缓存\n  - Wrapper 模式（代理模式、装饰器、适配器模式）：轻松实现对类的扩展\n  - Immutable 模式：不可变集合实现，如 ImmutableList、ImmutableSet、ImmutableMap 等\n- 更多可以自行学习：\n  - Netty\n  - SpringBoot\n  - Tomcat\n  - Dubbo\n  - Spring Cloud\n\n\n\n### 资源\n\n- 《设计模式之美》专栏：https://blog.csdn.net/aha_jasper/article/details/105695163 （原作者 Google 王争设计模式之美：https://time.geekbang.org/column/intro/250 ，是极客时间的付费课，里面的内容，尤其是开源实战和项目实战的部分讲的很好！有收获的朋友还是请支持正版哦）\n- Spring 相关框架源码分析视频：https://www.bilibili.com/video/BV1kF411e7WR （结合设计模式，包括 Spring、SpringMVC、SpringBoot、Tomcat 等）\n\n\n\n### 四、备战面试\n\n面试时对设计模式的考察主要有 4 种形式：\n\n1. 直接问你某个设计模式的作用和大致的原理，考察你对设计模式的了解程度\n2. 让你手写某个设计模式的代码，考察你对设计模式的熟悉程度和编码能力\n3. 给你一个实际的业务场景，让你去设计系统，考察你对设计模式的理解应用能力和逻辑思维\n3. 问你某个框架（轮子）的核心设计和源码细节，考察你对设计模式的理解应用能力\n\n\n\n#### 经典面试题\n\n1. 理论：简单介绍一下软件开发原则？\n1. 理论：设计模式如何分类？\n1. 你用过哪些设计模式？举例说明设计模式在你的项目或是某个框架源码中的应用。\n1. 说出某个设计模式的优缺点？什么时候使用它？\n1. 单例模式有哪些实现方式？分别有哪些优缺点？请手写其中一种\n1. 原型模式和单例模式的区别是什么？\n1. 简单工厂、工厂方法和抽象工厂三者有什么区别？\n1. 介绍一下代理模式，说一下静态代理和动态代理（比如 Spring AOP 就用到了）的区别？\n\n\n\n#### 资源\n\n- 设计模式面试题汇总：https://pan.baidu.com/s/1tjIGc7pnHjgiFPo0fhcKXw 提取码: wuan（朋友 JavaGuide 整理，很全面 \uD83D\uDC4D\uD83C\uDFFB）\n- 面试官最爱问的13道\"设计模式\"题（视频）：https://www.bilibili.com/video/BV1fR4y1N74H\n\n\n\n加油小伙伴们！\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 2,
        "thumbNum": 0,
        "favourNum": 1,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:35:28.000+00:00",
        "updateTime": "2023-03-28T06:27:23.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "设计模式",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640588119619551233",
        "title": "计算机网络学习路线 by 程序员鱼皮",
        "description": null,
        "content": "## 介绍\n\n计算机网络是指将地理位置不同的多台计算机或设备通过通信线路进行连接，从而实现信息传递和资源共享，或者组成一个更完整的计算机系统。\n\n如今，我们开发的绝大多数程序都依赖网络来加载文件和数据，比如网站、小程序、后台程序等，因此计算机网络的重要性不言而喻。\n\n学习计算机网络后，我们能够了解数据在不同计算机之间传输的过程和细节，一方面可以帮助我们了解一些基本的、生活中比较实用的网络知识，比如服务器、带宽、网速、流量等。另一方面，学好计算机网络，有助于我们开发出性能更高、更安全稳定的前端和后台应用。比如使用 HTTP 2.0 协议来代替 HTTP 1.x 来减少网页加载时间、使用 HTTPS 来提高网络的安全性、选用 UDP 而不是 TCP 协议来提高多人实时游戏数据的传输速度、在网络模型的第 4 层和第 7 层去实现负载均衡和 DDOS 防护等。\n\n计算机网络也有很多知识点和设计值得学习，可以应用到我们平时的项目开发、系统架构中，比如计算机网络分层思想、TCP 三次握手和四次挥手的连接机制、TCP 通过滑动窗口来进行拥塞控制等，学习这些思想也有助于我们更好地理解框架的设计和源码。\n\n此外，和操作系统一样，计算机网络也是 **考研和面试的重点**（尤其是前端和服务端开发），如果是大学期间的小伙伴，在课堂上就要认真学习！\n\n如果你想要从事网络方面的工作，比如网络工程师、网络运维、网络实施等，计算机网络一定要重点学习！核心中的核心！\n\n\n\n## 学习条件\n\n1. 至少学过一门编程语言（计算机网络理论知识较多，直接学容易被劝退）\n2. 急着找工作的同学可以先不学，等面试前直接看一些题目即可（从事网络方面的工作则必须好好学，不能等到面试再学）\n\n\n\n## 大纲\n\n![计算机网络学习路线 by 程序员鱼皮](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png)\n\n\n\n## 知识\n\n### 学习重点\n\n- 计算机网络分层模型以及各层的作用\n- 数据在两台计算机之间的整个网络传输过程（网站加载过程）\n- 应用层协议：HTTP、HTTPS、DNS\n- 传输层协议：TCP（重中之重）、UDP\n\n\n\n### 知识点大全\n\n- 互联网基本概念\n- 计算机网络分类\n- 计算机网络分层模型\n  - 分层思想\n  - 协议和服务\n  - OSI 七层模型\n  - TCP / IP 四层模型\n\n- 计算机网络性能指标\n  - 速率\n  - 带宽\n  - 时延\n  - 利用率\n  - 往返时间\n  - 丢包率\n  - 吞吐量\n\n- 应用层\n  - 作用和原理\n  - 应用进程通信方式\n    - 客户 / 服务器方式\n    - P2P 对等方式\n\n  - 常用协议\n    - HTTP\n    - HTTPS\n    - DNS\n    - FTP\n    - DHCP\n    - NTP\n    - 邮件相关协议\n\n  - CDN\n\n- 传输层\n  - 作用和原理\n  - 复用和分用\n  - 常用协议\n    - TCP\n      - 连接建立与断开\n      - 流量控制\n      - 拥塞控制\n      - 超时重传机制\n      - 可靠传输实现\n      - 报文首部格式\n\n    - UDP\n      - 报文结构\n\n    - UDP 和 TCP 的对比及应用场景\n\n- 网络层\n  - 路由器\n  - 常用协议\n    - IP 协议\n      - 地址划分\n      - IPV4\n      - IPV6\n      - 数据报首部格式\n\n    - ICMP 协议\n    - ARP / RARP 协议\n    - NAT 协议\n    - OSPF 协议\n    - BGP 协议\n\n  - 路由选择算法\n  - VPN 技术\n\n- 数据链路层\n  - 作用和原理\n  - 封装数据帧\n  - 差错控制\n  - 可靠传输\n  - MAC 地址\n  - PPP 协议\n\n- 物理层\n  - 作用和原理\n  - 物理介质\n  - 数据交换方式\n  - 信道复用\n\n- 网络安全\n  - 加密\n  - 认证\n  - 防火墙\n  - 常见攻击及防范\n\n\n\n\n## 学习建议\n\n1. 计算机网络的理论知识较多，初学不建议啃教材或者专业书籍，而是通过一些趣味科普书籍或视频来逐步了解。\n2. 建议和写文章一样，从整体到局部去学计算机网络，先了解有哪些网络分层、每个层次的作用和联系，再去按序了解每个层次内部的协议和细节。\n3. 计算机网络知识不要去死记硬背，哪怕记不住也没关系，等自己开发程序的时候可以思考数据传输的过程（比如网站加载的过程），通过抓包等实操的方式来加深印象。\n4. 不从事网络相关工作的话，计算机网络不用学的很深入，学习完重点知识就够了，甚至直接通过看面试题去学习也完全没有关系。\n5. 如果要从事网络相关工作（比如网络工程师），建议去考一些认证，比如华为认证、思科认证等等，可以自行了解一下。\n\n\n\n## 学习路线\n\n建议大家按照以下 3 个阶段来学习：\n\n1. 基础学习\n2. 实际运用\n3. 备战面试\n\n\n\n### 一、基础学习\n\n> 急于求职的话，本阶段可跳过\n\n本阶段的目标：了解计算机网络基础知识，跟着一个视频或书籍过一遍，对网络分层模型和重点知识有个大致的印象即可。\n\n自学网络可能会比较枯燥，建议先看看有趣的课外书，比如《图解 HTTP》，当个睡前读物即可。\n\n正式学习网络的话，如果目标是求职，可以看《计算机网络微课堂》视频课来入门。如果目标是考研升学，还在学校的同学好好上课一般就没问题了，自学的话可以看《王道计算机考研 - 计算机网络》视频，也可以阅读《计算机网络 - 自顶向下方法》或《计算机网络 - 谢希仁》等书籍。\n\n后面要面试前，再重点去背一些八股文就行。\n\n\n\n#### 推荐资源\n\n- 视频\n  - ⭐ 计算机网络微课堂：https://www.bilibili.com/video/BV1c4411d7jb（强烈推荐）\n  - 王道计算机考研 - 计算机网络：https://www.bilibili.com/video/BV19E411D78Q（适合考研）\n  - 中科大郑烇、杨坚全套《计算机网络（自顶向下方法 第7版）》：https://www.bilibili.com/video/BV1JV411t7ow（适合考研、学术）\n  - 中国大学 MOOC 哈工大计算机网络课程：https://www.icourse163.org/course/HIT-154005\n- 书籍\n  - ⭐《图解 HTTP》：https://www.aliyundrive.com/s/HifozcgJwep 提取码: 9gc7\n  - ⭐《图解 TCP / IP》：https://www.aliyundrive.com/s/XYyAymeeXRy 提取码: 9gc7\n  - 《网络是怎样连接的》：https://www.aliyundrive.com/s/3FgCbvHGQQZ 提取码: 9gc7\n  - 《计算机网络（第 7 版）》 谢希仁：https://www.aliyundrive.com/s/3VsnQoKqxdi 提取码: 9gc7\n  - 《计算机网络 - 自顶向下方法（第 6 版）》：https://www.aliyundrive.com/s/Dc3itcB6GU9 提取码: 9gc7（大黑书，难度比较大，一般不推荐）\n- 大学课件\n  - 浙大计算机网络基础：https://github.com/QSCTech/zju-icicles\n\n\n\n### 二、实际运用\n\n> 本阶段可跳过，在开发中实践即可\n\n本阶段的目标：根据自己的职业发展方向进行不同的实践，运用和巩固计算机网络知识。\n\n比如：\n\n1. 后端开发：基于 Socket 开发自己的通讯应用 / 框架、实现自己的浏览器、阅读开发框架源码等\n2. 前端开发：使用 HTTPS 协议增加网站安全性、使用 HTTP 2 协议提高网站加载速度、使用控制台等抓包工具分析请求 / 响应\n3. 网络工程师：使用华为 eNSP 或 Cisco Packet Tracer 模拟器搭建网络拓扑并进行配置\n4. 安全工程师：使用 Wireshark 之类的抓包工具分析数据包 / 数据帧\n\n\n\n#### 资源\n\n##### 实验\n\n- 《计算机网络－自顶向下方法（第 6 版）》编程作业：https://github.com/moranzcw/Computer-Networking-A-Top-Down-Approach-NOTES\n- 《计算机网络 - 自顶向下方法》习题 / 编程 / 实验答案：https://github.com/jzplp/Computer-Network-A-Top-Down-Approach-Answer\n- 哈工大计算机网络实验：https://github.com/rccoder/HIT-Computer-Network\n\n##### 网络相关认证\n\n- 华为 HCIA-HCIP-HCIE router&switch 视频教程：https://t.zsxq.com/FEiaEEA\n- H3C 厂商认证资料（面试+笔记+电子书+培训课件+实验手册+产品资料）：https://t.zsxq.com/NBAQRZ3\n\n\n\n### 三、备战面试\n\n面试时对计算机网络的考察主要有 5 种形式（主要针对前后端开发）：\n\n1. 直接问你某个具体的知识点，比如：讲解 TCP 三次握手和四次挥手机制\n2. 结合不同方向的专业知识来考察，比如：谈谈网站的加载过程（前端）、聊聊四七层负载均衡的实现和优缺点（后端）\n3. 通过实际开发中遇到的问题考察你的网络基础，比如：网站加载过慢，有哪些优化方式？\n4. 问你某个框架（轮子）的核心设计和源码细节，可能会包含计算机网络知识点的运用，比如 Netty 针对 UDP 协议的封装设计\n5. 系统设计类问题，比如：如何实现一个浏览器？（这种问题相对比较少）\n\n\n\n#### 经典面试题\n\n1. 计算机网络分层结构，各层有哪些常用协议？\n2. TCP 和 UDP 协议的区别？如何选择应用哪个协议？\n3. TCP 为什么需要三次握手和四次挥手？为什么不是两次握手、四次握手？为什么不是三次挥手？\n4. TCP 滑动窗口和拥塞控制机制\n5. TCP 如何保证可靠性？\n6. HTTP 协议常用状态码和含义\n7. HTTP 和 HTTPS 协议的区别？\n8. HTTPS 的原理、请求流程？\n9. HTTP 2 为什么快？\n10. HTTP 的短连接和长连接，以及如何选择？\n11. POST 和 GET 请求的区别\n12. 浏览器中输入URL 返回页面的过程？（包括 DNS 解析过程）\n13. Cookie 和 Session 的区别？\n\n\n\n#### 资源\n\n##### 总结复习\n\n- ⭐️ 小林的图解网络：https://pan.baidu.com/s/1D6ygpsrZbEKK9V-Z80xcvQ 提取码: ecf2（号主原创，质量很高）\n- ⭐️ 牛客网计算机网络基础在线练习：https://www.nowcoder.com/exam/intelligent（随缘刷刷就行，绝大多数题目面试不会问）\n- 软件设计师计算机网络考点：https://pan.baidu.com/s/1K1hpKuS6XGG71jWr4N3UCg 提取码: 2g55 \n- 软件设计师计算机网络基础知识：https://pan.baidu.com/s/1XJzDJcxRhqs360nw-_T8VA 提取码: cs81 \n- 计算机网络基础面试宝典：https://pan.baidu.com/s/1whsPlPyDnQGf8uH5sV4Awg 提取码: 5j4n\n- 13 道计算机网络面试题：https://pan.baidu.com/s/1Ou_aEWq4o7cfoz1TY126TA 提取码: 8uru\n\n##### 面试题\n\n- ⭐️ 阿秀的 100+ 计算机网络面试题汇总：https://interviewguide.cn/#/Doc/Knowledge/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C\n- 计算机网络 97 问：https://www.nowcoder.com/discuss/807702\n- 25 道计算机网络面试题总结：https://blog.csdn.net/lxw1844912514/article/details/120279006\n- 20 道计算机网络面试题总结：https://www.nowcoder.com/discuss/839894\n\n\n\n加油小伙伴们！\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 0,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:34:23.000+00:00",
        "updateTime": "2023-03-28T05:35:39.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "计算机网络",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640587909942099969",
        "title": "操作系统学习路线 by 程序员鱼皮",
        "description": null,
        "content": "## 介绍\n\n操作系统是管理计算机硬件与软件资源的计算机程序，是计算机系统中 **最基本** 的系统软件。\n\n学习操作系统，一方面能帮助我们了解程序执行的原理、熟悉更多计算机的概念（比如内存、CPU、文件系统、磁盘）；另一方面，操作系统中的结构设计、算法设计、解决问题的思路和方案都非常优秀，可以帮助我们开拓思路，从而在自己编写程序、设计算法时有了更多的选择和考量（比如死锁问题的处理）。\n\n此外，操作系统也是 **考研和面试的重点** ，如果是大学期间的小伙伴，在课堂上就要认真学习。\n\n\n\n## 学习条件\n\n1. 至少学过一门编程语言（否则学操作系统时一些代码演示可能看不懂）\n2. 急着找工作的同学可以先不学，等面试前直接看一些题目即可\n\n\n\n## 大纲\n\n![操作系统学习路线 by 程序员鱼皮](https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/1/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png)\n\n\n\n## 知识\n\n1. 基本概念\n\n   - 操作系统的作用\n   - 操作系统的体系结构\n     - 内核概念\n   - 处理器状态\n     - 用户态\n     - 核心态\n   - 系统调用\n   - 中断和异常\n\n2. 进程管理\n\n   - 进程与线程\n\n     - 基本概念\n     - 进程 / 线程状态及转换\n\n   - CPU 进程调度算法\n\n     - 先来先服务（FCFS）\n     - 短作业优先（SJF）\n     - 最短剩余时间优先（SRTN）\n     - 高响应比优先（HRRN）\n     - 时间片轮转\n     - 优先级调度\n     - 多级反馈队列\n\n   - 进程同步与互斥\n\n     - 信号量机制\n\n     - 生产者 - 消费者模型\n     - 读者 - 写者问题\n     - 哲学家进餐问题\n\n   - 进程通讯机制\n\n   - 死锁\n     - 死锁产生的条件\n     - 死锁预防与避免\n     - 死锁检测与恢复\n\n3. 内存管理\n\n   - 基本概念\n     - 内存\n     - 内存管理\n     - 地址空间\n   - 覆盖与交换\n   - 内存分配与回收\n     - 连续内存分配\n       - 单一连续分配\n       - 内存碎片\n       - 分区\n         - 固定分区分配\n         - 动态分区分配\n     - 非连续内存分配\n       - 分段存储管理\n       - 分页存储管理\n       - 页表\n       - 二级页表\n       - 多级页表\n       - 反向页表\n       - 地址变换机构\n         - 基本\n         - 基于快表\n       - 段页式存储管理\n     - 虚拟内存（非连续内存分配）\n       - 基本概念\n       - 局部性原理\n       - 实现\n         - 请求分段存储管理\n         - 请求分页存储管理\n         - 请求段页式存储管理\n       - 页面置换算法\n         - 最佳置换算法（OPT，理想置换算法）\n         - 先进先出置换算法（FIFO）\n         - 最近最久未使用置换算法（LRU）\n         - 时钟置换算法（CLOCK）\n         - 第二次机会算法\n       - 页面分配策略\n\n4. 文件管理\n\n   - 基本概念\n     - 文件系统\n     - 文件\n       - 逻辑结构\n       - 物理结构\n     - 目录\n     - 文件描述符\n   - 文件操作\n\n5. 磁盘管理\n\n   - 磁盘结构\n   - 磁盘调度算法\n     - 先来先服务（FCFS）\n     - 最短寻找时间优先算法（SSTF）\n     - 扫描算法（SCAN，经典电梯调度算法）\n     - 循环扫描算法（CSCAN）\n\n6. 设备管理\n\n   - 基本概念\n     - I / O 设备\n     - I / O 设备分类\n   - I / O 控制\n   - 缓冲区管理\n\n\n\n## 学习建议\n\n1. 操作系统具有极强的理论性，学习过程中难免会感觉枯燥，因此在初学时不建议强行去背诵一些知识，跟着视频过一遍、能够描述出操作系统大概涉及哪些知识点就好（结合思维导图去学习）。在面试 / 考研前再根据自己的时间去记忆题目就好。\n2. 在学习操作系统内的算法（比如 CPU 进程调度、内存页面置换、磁盘调度）时，要理解每个算法的概念、特点、优势与劣势、应用场景，因为我们在程序设计时极有可能应用这些算法来解决问题，比如 LRU 算法。\n3. 在学习过程中，可能会接触到部分算法和源码（比如生产者 - 消费者问题），时间允许的话可以试着自己实现一遍，加深理解。\n\n\n\n## 学习路线\n\n> 本学习路线适用于所有从 0 开始学操作系统、了解操作系统核心概念、希望快速提升基础能力的同学。但如果要从事操作系统底层开发的话，这份路线还不够，需要深入理解 Linux 等操作系统的设计，并进行大量的编码练习。\n\n\n\n### 预热\n\n> 该阶段可跳过，或者与之后的阶段同时进行\n\n\n\n在任何时候，都可以在课外时间利用一些轻松精简的视频或书籍来帮助我们简单了解计算机、操作系统相关的概念。\n\n推荐《计算机科学速成课》视频：https://www.bilibili.com/video/BV1EW411u7th，仅观看 P 1 - 10、P 18 - 20 即可。\n\n\n\n### 一、基础学习（概念）\n\n> 这个阶段重在了解操作系统的基本概念，对其体系结构有个全面的认识，不必纠结于源码。\n>\n> 当然，能力很强的同学也可以跳过本阶段，直接去看下个阶段的视频教程。\n\n操作系统的学习侧重于理论，主要分为六大部分：基本概念、进程管理、内存管理、文件管理、磁盘管理、设备管理。其中，**最重要** 的是进程管理和内存管理。这两部分和我们编写程序相关（比如并发编程、死锁、内存分配），因此也是面试时的高频考点。\n\n建议跟着完整的视频教程学习，最好不要一开始就看复杂的书籍（比如《现代操作系统》、《深入理解计算机系统》等）。\n\n对于操作系统这种经典理论，不建议看培训机构的课程（也基本没有），还是大学教授讲的课更专业严谨一些。\n\n推荐《王道计算机考研 - 操作系统》视频课：https://www.bilibili.com/video/BV1YE411D7nH 。毕竟是考研课，这门课讲的非常清晰、受众广泛，哪怕不是计算机专业的同学（跨考）也能看懂。视频中老师整理了大量的思维导图，也能培养大家的体系化思维。\n\n学完之后可以通过牛客网的在线练习来巩固一下：https://www.nowcoder.com/exam/intelligent（计算机基础 => 操作系统）。\n\n\n\n#### 其他资源\n\n> 在学习某个知识点遇到问题时可以翻阅以下资料\n\n- 《认识操作系统》操作系统知识点梳理 PDF：https://www.aliyundrive.com/s/C4MdAdKqtwK 提取码: 92ow\n- 《图解系统》PDF：https://www.aliyundrive.com/s/uNiqrTvCdGG 提取码: 92ow\n- 浙江大学课程攻略共享计划【操作系统】资料：https://github.com/QSCTech/zju-icicles/tree/master/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F（包含 PPT 课件、教材、习题解答、课程实验、自测题目、历年考卷等，对应视频在 B 站有，但是清晰度极低，不推荐）\n\n\n\n### 二、深入学习（实验）\n\n> 这个阶段会结合源码来讲解分析操作系统的实现，并且通过一些实验加强了解。\n>\n> 对于时间紧、只是想找工作的同学，本阶段可直接跳过。\n\n\n\n上个阶段推荐的课程侧重于基本概念（理论知识），不涉及源码。而这个阶段推荐的课程资源更细节、同时包含了一些实验帮助大家更好地深入理解操作系统。\n\n比如以下几所名校的课程，选一门看即可（首推清华大学）：\n\n- 清华大学计算机操作系统原理：https://www.bilibili.com/video/BV1wq4y1M7qf（实验环境及源码：https://github.com/yusong-shen/mooc_os_lab）\n- 2020 南京大学 “操作系统：设计与实现” (蒋炎岩)：https://www.bilibili.com/video/BV1N741177F5（相关资料见该视频评论区）\n- 操作系统（哈工大李治军老师）32讲（全）超清：https://www.bilibili.com/video/BV1d4411v7u7（实验：https://www.shiyanlou.com/courses/115）\n\n\n\n如果想进一步巩固知识，可以在看视频的同时去阅读一些计算机经典书籍，比如：\n\n- 《现代操作系统》：https://www.aliyundrive.com/s/5ogrRjoAtgA 提取码: 92ow\n- 《深入理解计算机系统》：https://www.aliyundrive.com/s/FgwsaXj8unE 提取码: 92ow。对应课程视频：https://www.bilibili.com/video/av31289365\n- 《操作系统：精髓与设计原理》：https://www.aliyundrive.com/s/3oX8Ws2TfBb 提取码: 92ow\n\n\n\n看了上述的视频教程后，如果还想进一步学习，可以跟着教程来尝试自己动手制作一个简易的操作系统（MiniOS），帮助你真正理解操作系统的设计与实现。\n\n国外教程推荐 MIT 6.828 和难度相对低一些的 MIT 6.S081，这是两门经典的实验课：\n\n- MIT 6.828：https://pdos.csail.mit.edu/6.828/2018/schedule.html\n- MIT 6.S081：https://pdos.csail.mit.edu/6.S081/2020/schedule.html，中文翻译版：https://mit-public-courses-cn-translatio.gitbook.io/mit6-s081/，B 站视频中英文字幕版：https://www.bilibili.com/video/BV19k4y1C7kA\n\n\n\n当然也可以看一些书籍，比如：\n\n- 《30天自制操作系统》：https://www.aliyundrive.com/s/TLxgHbEgtbR 提取码: 92ow，源码中文版：https://github.com/yourtion/30dayMakeOS\n\n\n\n### 三、备战面试\n\n这一章没什么好说的，找工作前强烈建议背诵一些面试题。当然，如果你能结合自己编程的实际经验去记忆和回答就更好了。\n\n操作系统面试的重点主要是进程管理 + 内存管理，进程管理又是重点中的重点，以下经典面试题一定要搞懂（可以从下面的资源部分找到答案）：\n\n1. 进程和线程的区别？\n2. 进程调度算法有哪些？\n3. 常见的进程通信方式？\n4. 有哪些进程同步的方法？\n5. 什么是死锁，什么情况下会出现死锁（必要条件）？怎么预防和处理？\n6. 介绍常见的内存页面置换算法\n7. 什么是中断？\n8. 什么是系统调用？\n9. 操作系统如何进行内存管理？\n10. 什么是虚拟内存？\n11. 什么是局部性原理？\n12. 什么是缓冲区溢出？\n\n还有很多和 Linux 操作系统相关的题目，此处暂不列举。\n\n\n\n#### 资源\n\n- 操作系统相关面试题 60+：https://interviewguide.cn/#/Doc/Knowledge/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F\n- 操作系统相关面试题 20+：https://snailclimb.gitee.io/javaguide/#/docs/cs-basics/operating-system/operating-system-basic-questions-01\n- 操作系统相关面试题 20+：https://github.com/wolverinn/Waking-Up/blob/master/Operating%20Systems.md\n- 操作系统知识总结：http://www.cyc2018.xyz/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.html\n- 89 个操作系统核心概念：https://mp.weixin.qq.com/s?__biz=MzkwMDE1MzkwNQ==&mid=2247495992&idx=1&sn=46d196debe727f1b43c08d692f11d08f&source=41#wechat_redirect\n\n\n\n加油小伙伴们！\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 0,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:33:33.000+00:00",
        "updateTime": "2023-03-28T05:35:41.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "操作系统",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640586867363954689",
        "title": "数据结构和算法学习路线 by 程序员鱼皮",
        "description": null,
        "content": "为什么数据结构和算法如此重要？因为：程序 = 数据结构 + 算法\n\n数据结构是一组数据的存储结构和组织方式，使得该组数据便于访问、修改、存储。\n\n算法是操作数据的一组方法，解决问题的一系列步骤。\n\n\n\n## 学习条件\n\n1. 必须要学过至少一门编程语言\n2. 需预留至少 2 个月的空余时间，急着找工作的同学可以先不学\n\n\n\n## 大纲\n\n![](https://qiniuyun.code-nav.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%20by%20%E7%A8%8B%E5%BA%8F%E5%91%98%E9%B1%BC%E7%9A%AE.png)\n\n\n\n## 知识\n\n- 数据结构\n  - 线性结构\n    - 数组\n      - 字符串\n    - 链表\n      - 单向链表\n      - 双向链表\n      - 循环链表\n    - 栈\n    - 队列\n      - 普通队列\n      - 双端队列\n  - 散列结构\n    - 集合\n    - 映射\n    - BitMap\n  - 树\n    - 二叉树\n    - 二叉查找树\n    - 多叉树\n    - 前缀树\n    - 堆\n      - 小顶堆\n      - 大顶堆\n  - 图\n    - 最短路径\n    - 并查集\n    - 最小生成树\n    - 拓扑排序\n- 算法\n  - 排序\n    - 冒泡排序\n    - 快速排序\n    - 插入排序\n    - 希尔排序\n    - 选择排序\n    - 堆排序\n    - 归并排序\n    - 计数排序\n    - 桶排序\n    - 基数排序\n  - 贪心\n  - 分治\n  - 动态规划\n  - 递归\n  - 回溯\n  - 枚举\n  - 查找\n    - 有序表查找\n      - 二分查找\n    - 线性表查找\n    - 树结构查找\n    - 散列表查找\n  - 搜索\n    - 深度优先搜索 DFS\n    - 广度优先搜索 BFS\n  - 字符串匹配\n    - KMP\n    - 前缀树\n  - 位运算\n- 复杂度分析\n  - 时间复杂度\n  - 空间复杂度\n\n\n\n## 学习路线\n\n> 本学习路线适用于所有从 0 开始学算法的同学，但如果是要搞 ACM 算法竞赛的话，只学这些是远远不够的哦。\n\n\n\n### 预热\n\n> 该阶段可跳过，或者与之后的阶段同时进行\n\n\n\n初学编程、刚开始学习算法时，可以先通过阅读课外书、科普视频来培养兴趣，简单地入门，而不要求真正的理解。\n\n推荐阅读[《漫画算法：小灰的算法之旅》](https://zh.u1lib.org/book/18051247/c74b8f) ，轻松幽默。\n\n\n\n### 依次学习\n\n了解每个数据结构和算法的概念、特点、适用场景、时空复杂度，并且能够自己写代码从 0 到 1 实现一遍每个数据结构和算法。注意要按顺序学习，而不是一次性看完所有的数据结构和算法后才再回过头来写代码！\n\n要重点学的知识点基本就是大纲中提到的那些，图论这一块了解即可，优先级不高，面试考的也不多。链表、树是面试重点。\n\n推荐直接从 LeetCode 的学习板块 LeetBook 开始刷起，边学边写代码，学的更扎实。\n\n可以按照如下顺序学习：\n\n1. 算法基础理论和复杂度分析：https://www.bilibili.com/video/BV1nJ411V7bd（看前几节就可以了，后面可以配合着 LeetCode 去看，依次攻克每个知识点）\n2. 数组和字符串：https://leetcode-cn.com/leetbook/detail/array-and-string/\n3. 链表：https://leetcode-cn.com/leetbook/detail/linked-list/\n4. 队列 & 栈：https://leetcode-cn.com/leetbook/detail/queue-stack/\n5. 哈希表：https://leetcode-cn.com/leetbook/detail/hash-table/\n6. 查找表类算法：https://leetcode-cn.com/leetbook/detail/all-about-lockup-table/\n7. 二分查找：https://leetcode-cn.com/leetbook/detail/binary-search/\n8. 二叉树：https://leetcode-cn.com/leetbook/detail/data-structure-binary-tree/\n9. 二叉搜索树：https://leetcode-cn.com/leetbook/detail/introduction-to-data-structure-binary-search-tree/\n10. 前缀树：https://leetcode-cn.com/leetbook/detail/trie/\n11. N 叉树：https://leetcode-cn.com/leetbook/detail/n-ary-tree/\n12. 数组类算法：https://leetcode-cn.com/leetbook/detail/all-about-array/\n13. 初级算法：https://leetcode-cn.com/leetbook/detail/top-interview-questions-easy/\n14. 中级算法：https://leetcode-cn.com/leetbook/detail/top-interview-questions-medium/\n\n\n\n完整教程：\n\n- 数据结构与算法基础（青岛大学-王卓）：https://www.bilibili.com/video/BV1nJ411V7bd\n- 尚硅谷 Java 数据结构与算法（视频）：https://www.bilibili.com/video/BV1E4411H73v （难度和涉及的知识点比面试的要求大一些，**初次学习不建议看** ，适合时间充裕、希望更全面学习的朋友来查漏补缺）\n- 《算法图解》书籍：https://www.aliyundrive.com/s/MFSC8TP7ANB 提取码: 73dl\n- 《大话数据结构》书籍：https://www.aliyundrive.com/s/MFSC8TP7ANB 提取码: 73dl\n- 还有一些不同语言的数据结构与算法教程，可以在 [知识库 - 资源汇总](https://bcdh.yuque.com/staff-wpxfif/resource/all) 里搜索和获取。\n\n\n\n一些辅助学习的工具：\n\n- VisuAlgo 数据结构和算法动态可视化：https://visualgo.net/zh\n- 数据结构可视化：https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\n- RegExr：https://www.code-nav.cn/rd/?rid=79550af2601114e9012110711798772b （学习、创建和测试正则表达式的在线可视化工具）\n\n\n\n### 依次练习\n\n学完某个数据结构和算法后，立刻趁热打铁去做几道相关的题目。\n\n每道题目给自己一个时间限制，超出时间后就直接去阅读题解（建议看带有图片和动画演示的题解），有一些思路后再试着自己去做题，直到把题目完成写出，并且要真正理解每道题目的解法。\n\n即使是自己做出的题目，也建议去看下其他同学的题解，多积累一种方法。\n\n\n\n### 刷题\n\n当把每个知识点学完一遍后，可以去 LeetCode 网站的题库中刷题，按照难易度、通过率、热门程度每天坚持刷几道。时间紧张（三个月内）的话也可以直接去刷热门题目集合。\n\n有时间的话，建议大家可以参加 [蓝桥杯竞赛](https://www.lanqiao.cn/) 、考 [PAT 认证](https://www.patest.cn/)，检验自己的学习、丰富自己的简历。\n\n\n\n相关资源：\n\n- 算法刷题网站\n  - LeetCode：https://leetcode-cn.com/\n  - 洛谷：https://www.luogu.com.cn/\n  - 蓝桥：https://lx.lanqiao.cn/\n  - 牛客网：https://www.nowcoder.com/exam/oj\n- LeetCode 精选 100 道：https://leetcode-cn.com/problem-list/2cktkvj/\n- LeetCode 精选算法 200 题：https://leetcode-cn.com/problem-list/qg88wci/\n- LeetCode 算法高频面试题汇总：https://leetcode-cn.com/leetbook/detail/top-interview-questions/\n\n\n\n### 面试前\n\n在面试前，建议刷一遍 LeetCode 热门题目，有时间的话还可以阅读《剑指 Offer》、《剑指 Offer 专项突破版》、《程序员代码面试指南》等书籍，争取面试时撞到原题。\n\n\n\n几份完整的题解，有空的话挑一份看即可：\n\n- 图解算法数据结构：https://leetcode-cn.com/leetbook/detail/illustration-of-algorithm/\n- Leetcode 真题解析视频：https://www.bilibili.com/video/BV1a54y1b74k\n- LeetCode 101（C++）：https://github.com/changgyhub/leetcode_101\n- LeetCode 题解（C++）：https://github.com/soulmachine/leetcode\n- LeetCode Cookbook（Go 语言）：https://github.com/halfrost/LeetCode-Go\n\n\n\n如果有意向公司（比如大厂）的话，可以去刷一下 [历年笔试题目](https://www.nowcoder.com/exam/company) （难度可能比较大，不要因此丧失信心，多练习后就习惯了）。\n\n\n\n### 工作后\n\n工作之后，如果有兴趣的话，可以通过刷题来帮助自己巩固编程语言、提升思维能力。\n\n\n\n## 学习建议\n\n1. 数据结构和算法不可追求速成（学得快忘得快），而是应该每天坚持刷 2 道以上的题目保持手感。（可以在星球中打卡分享自己每天所刷的题目，也许会有小伙伴和你一起讨论哦）\n2. 自己在写算法题目时，要给代码多写一些注释，记录自己当时的思考，并且做过的每道算法题目的代码都要分类保存好，便于自己复习。\n3. 可以根据实际情况自己写一些题解，写题解的过程中，不仅能检验自己是否真的理解，还能再次巩固、帮助自己复习。\n4. 算法是一种思想，用任何你正在学习或者熟悉的编程语言来写代码均可，可以帮助你复习编程语言的语法和细节。\n5. 不用因为担心自己算法不够而不敢面试，只要你有了基本的开发技能就足够了，算法可以持续强化。\n6. 很多同学可能会习惯性地刷自己觉得很简单的题目，而对于中等 / 困难的题目有恐惧感，下意识地回避。这在刚开始入门时没什么问题，但如果已经刷了几百题，不要满足于自己会的知识，要适当挑战，走出舒适圈。\n7. 有时间的朋友也可以试着参与各种算法竞赛和考证书，比如蓝桥杯、PAT 认证、牛客网比赛、LeetCode 周赛等。这些比赛没什么门槛，难度也没有 ACM 那么高。可以帮助你集中精神高效做题、提前适应面试的节奏感。\n\n\n\n加油小伙伴们！",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 1,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:29:24.000+00:00",
        "updateTime": "2023-03-28T05:43:54.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "数据结构",
          "算法",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1640586673306091521",
        "title": "Python 学习路线 by 程序员鱼皮",
        "description": null,
        "content": "在看路线前，建议大家先通过以下视频了解几个问题：\n\n- Python 为什么这么火？\n- 为什么都在说学 Python 找不到工作？Python 真香么？\n- 我要学 Python 么？\n- 怎么快速学习？\n\n视频地址：https://www.bilibili.com/video/BV133411C7u5/\n\n\n## Python 为什么火了？\n\n有很多原因，列举几点：\n\n1. 语法简单易学，其他语言 5 行代码才能实现的东西，Python 一行搞定！可以少写很多代码，因此不少同学拿 Python 刷算法题（但注意要理解算法本身哦）。\n2. 类库生态丰富，想做什么功能基本都有现成的代码，拿来直接用就行，无比方便！\n3. 免费开源，感兴趣、有能力的同学可以自己去研究源码。\n4. 其他特性，比如跨平台、可扩展等。\n5. 作为数据科学、人工智能的首选语言，踩到了时代的风口。\n\n\n\n于是乎，Python 被推向了神坛，甚至在 2021 年 10 月的编程语言排行榜中，Python 登上了第一位！\n\n![TIOBE 编程语言排行榜](https://qiniuyun.code-nav.cn/image-20211009115608685.png)\n\n\n\n但就是这样一门 “永远的神” 的编程语言，却在网上被口口相传说：学了 Python 找不到工作！\n\n哎，为啥呢？\n\n\n\n## 为什么 Python 不适合找工作？\n\n一方面是，大多数的企业，都不用 Python 来开发应用。\n\n因为 Python 的运行速度太慢了，别说跟底层的 C++ 比了，Java 都能甩它几条街！而且这和语言本身的设计实现有关，所以哪怕你再出什么技术去优化它的性能，也终究有个瓶颈，世界上最好的语言 PHP 也是一样。\n\n而对企业来说，**性能** 会直接影响用户体验和机器成本，尤其是在这个信息爆炸、大家都在追求性能的时代，Python 在应用开发领域的地位就很尴尬，而开发岗又正好是程序员中占比极高的岗位。\n\n另一方面，虽然 Python 的应用场景很多、相关岗位也不少，又是什么 AI、数据科学的主流语言是吧，未来很美好。但是，这些前沿技术的难点并不是 Python 语言的代码本身，而是算法和思想。Python 只是一个调包、把你思想表达出来的工具而已。所以这些前沿岗位的门槛远比你入门 Python、或者听培训机构画饼时要高的多，算法岗位、大厂的产品岗真就是神仙打架，而且研究生居多。\n\n\n\n## 学习目标\n\n既然这样，那我还要不要学 Python 呢？\n\n我认为：**必须要学！**\n\n但是，一定要先思考自己的学习目标，目标不同，对 Python 的学习态度和投入的时间也不同。\n\n如果想找开发岗位的工作，像上面说的，不建议把 Python 作为你的主语言，而是把它当做你的副武器。只需简单学学 Python 基础，就可以编写 Python 脚本来自动化办公、提高工作效率、做一些小工具了，性价比很高。\n\n**如果说编程语言是工具，那 Python 是对这句话的完美诠释。** 多会用一个神器，谁不爱呢？\n\n如果你想找其他岗位的工作，比如运维、测试、数据分析、产品经理、大数据、爬虫、人工智能、图像处理、多媒体处理、算法研究，当然也可以，只是如果以这些岗位为目标，除了要打好 Python 基础外，更重要的是理解对应领域的思想、方法和实践，而不是只会引库调包。\n\n如果你是初学编程或者出于好奇学编程，我也建议你学 Python，好玩、能学下去、能培养兴趣，这些对初学者非常重要，有了兴趣之后，再学别的语言就会如鱼得水。\n\n\n\n## 学习建议\n\n对于初学者和非 Python 岗位的从业者，就把 Python 当工具学，了解下基础语法和常用类库，需要写 Python 脚本时，能利用搜索引擎和文档写出（或者复制）代码就行。只要你学过其他编程语言，上手 Python 真的都很容易，3 - 7 天就能学会。\n\n建议学习时多写些小例子，比如 Python 处理表格、Python 处理 PDF 等，感受 Python 类库的强大就完事儿~\n\n\n\n## 学习路线大纲\n\n折叠了一部分，还是老长，**思维导图获取见文末** ：\n\n![鱼皮 - Python 学习路线](https://qiniuyun.code-nav.cn/img/%E9%B1%BC%E7%9A%AE%20-%20Python%20%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png)\n\n\n\n## 学习路线\n\n### 基础\n\n- Python 安装\n- 开发工具\n  - PyCharm\n  - Sublime\n  - VS Code\n- 变量\n  - 定义变量\n  - 关键字\n  - 命名规则\n  - 基本数据类型\n  - 类型转换\n- 运算符和表达式\n- 流程控制\n  - 条件分支\n  - 循环\n- 基本数据结构\n  - 字符串\n  - 列表\n  - 元组\n  - 集合\n  - 字典\n- 函数\n  - 定义\n  - 参数传递\n  - 作用域\n  - lambda 表达式\n  - 常用内置函数\n- ⭐ 面向对象编程\n  - 类和对象\n  - 三大特性\n    - 封装\n      - self\n      - 属性\n      - 方法\n        - 类方法\n        - 实例方法\n        - 静态方法\n      - 访问控制\n    - 继承\n      - 单继承\n      - 多继承\n    - 多态\n      - 方法重写\n  - 运算符重载\n  - 装饰器\n  - 反射\n- 模块\n  - 导入模块\n  - 常用模块\n    - 文件处理\n    - 日期时间\n- 包\n  - 导入包\n  - 生成包\n- 异常处理\n  - 捕获异常\n  - try ... else ... finally 结构\n  - 自定义异常\n- 文件操作\n  - 文件开闭\n  - 文件读写\n\n\n\n### 进阶\n\n- 函数进阶\n  - 闭包\n  - 匿名函数\n  - 生成器函数\n  - 装饰器\n  - 高阶函数\n- 正则表达式\n- 数据库编程\n  - 数据库基础\n  - SQL 编写\n  - 查询\n    - 聚合\n    - 分组\n    - 关联\n    - 排序\n  - 事务\n  - 数据库设计\n  - 数据库调优\n- 并发编程\n  - 同步和异步\n  - 阻塞和非阻塞\n  - 多线程\n  - 多进程\n  - 协程\n  - 并发类库\n- 网络编程\n  - 网络基础（七层模型、IP）\n  - 网络协议（TCP、UDP、HTTP、HTTPS、FTP、DNS）\n  - WebSocket\n\n\n\n### web 开发\n\n- Django 框架\n  - 安装与 Demo\n  - MVT 分层\n  - 模型\n    - 数据库基础\n    - ORM\n      - 单表查询\n      - 多表查询\n      - 聚合查询\n  - 视图\n  - 模板\n    - 模板语法\n    - 静态资源\n  - 路由\n  - Django Admin 管理工具\n  - 测试\n  - 会话\n  - 鉴权\n  - 文件上传\n  - 中间件\n  - 高级特性\n    - 分页\n    - 缓存\n      - 本地缓存\n      - Redis 分布式缓存\n    - 序列化\n    - 信号\n    - celery 任务调度\n  - Restful API 开发\n    - 概念\n    - 数据序列化\n    - Django Rest Framework\n  - 部署\n  - 项目实战\n- 前端基础\n  - HTML\n  - CSS\n  - JavaScript\n- Flask 框架\n\n\n\n### 爬虫\n\n- 概念\n- 合法性\n- 数据抓取\n  - 常用网络协议（http / https）概念\n  - 请求\n    - 请求头\n    - 请求参数\n    - 请求类型\n  - 响应\n    - 响应头\n    - 响应参数\n  - requests 模块\n  - urllib 模块\n  - 模拟登陆\n  - 静态 / 动态网站抓取\n  - 无头浏览器\n    - selenium\n    - puppeteer\n- 数据解析\n  - 常用标签\n  - BeautifulSoup\n  - 正则表达式\n  - xpath\n- 数据导出\n  - 文件\n    - Excel\n    - CSV\n  - 数据库\n    - MongoDB\n    - MySQL\n  - 中间件\n    - Redis\n- Scrapy 框架\n  - 核心概念\n    - 命令行工具\n    - Spiders\n    - Selectors\n    - Items\n    - Item Loaders\n    - 管道\n    - Scrapy Shell\n    - Link Extractors\n  - 调度器\n  - 分布式爬虫\n  - 部署\n- 并发异步爬虫\n  - aioHttp\n  - asyncio\n- 高级\n  - IP 代理\n  - 验证码识别\n  - APP 抓取\n  - 增量式爬虫\n- 项目实战\n- 反爬虫\n  - 请求头限制\n  - 验证码\n  - 黑白名单\n  - 封禁 IP\n  - 数据加密\n  - 数据混淆\n  - 行为分析\n\n\n\n### 自动化运维\n\n- Linux 环境\n- Shell 脚本编写\n- 脚本管理\n- 脚本发布\n- Python 运维库\n- 常用运维工具\n\n\n\n### 数据分析（数据科学）\n\n- 环境搭建\n  - Anaconda\n  - Conda\n  - Miniconda\n  - Jupyter Notebook\n- 常用数据结构\n- 常用类库\n  - Numpy\n    - 数组\n    - 索引\n    - 切片\n    - 多维数组\n    - 函数\n  - Pandas\n    - Series\n    - DataFrame\n    - 索引\n    - 对齐\n    - 函数\n    - 统计\n- 数据处理\n  - 数据清洗\n  - 层次化索引\n  - 数据连接\n  - 数据合并\n  - 分组聚合\n  - 轴向旋转\n- 数据可视化\n  - matplotlib\n  - seaborn\n  - pyechart\n\n\n\n### 算法（人工智能）\n\n> 鱼皮自己没怎么接触人工智能，结合网上很多大神的资料整理而成，也有一定参考意义。\n\n\n\n- 数学基础\n  - 高等数学\n  - 线性代数\n  - 概率论\n  - 统计分析\n- 机器学习\n  - 特征工程\n  - 模型\n    - 模型分类\n    - 模型评估\n    - 模型训练\n    - 模型调优\n  - 常用算法\n    - 监督与无监督学习\n    - 回归（有监督）\n      - 线性回归\n      - 决策树\n      - 集成算法\n    - 分类（有监督）\n      - 逻辑回归\n      - 决策树\n      - 支持向量机\n      - 集成算法\n      - 贝叶斯算法\n    - 聚类（无监督）\n      - k-means\n      - dbscan\n    - 降维\n      - 主成分分析\n      - 线性判别分析\n    - 进阶\n      - GBDT 提升算法\n      - lightgbm\n      - EM 算法\n      - 隐马尔科夫模型\n  - 多因子模型\n  - 常用库\n    - Scikit-learn\n  - 量化交易策略\n- 深度学习\n  - 数据预处理\n  - 算法\n    - 神经网络\n    - 卷积神经网络\n    - 递归神经网络\n    - 对抗生成网络\n    - 序列网络模型\n  - 常用算法\n  - 框架和平台\n    - Tenserflow2\n    - Pytorch\n    - Keras\n    - Caffe\n- 自然语言处理\n- 图像处理\n- 计算机视觉\n\n\n\n\n\n## 常用类库\n\nPython 能被广泛应用，很大程度上是因为其丰富的类库，就是他人提前写好并封装的代码。基本你要做什么东西都能找到对应的类库，直接看文档用就行了，大大提高开发效率！\n\n开源项目 `awesome-python-cn`（地址：https://github.com/jobbole/awesome-python-cn） 和 `awesome-python`（地址：https://github.com/vinta/awesome-python）已经帮大家整理了各方向的 Python 类库，数量非常多。鱼皮在此基础上筛选了一些相对优质的库，分享给大家。\n\n\n\n### 通用\n\n#### 日期处理\n\n- delorean：日期处理库\n- pendulum：日期时间操作库\n- dateutil：对标准 datetime 模块的强大扩展\n\n\n\n#### 终端优化\n\n- IPython：功能丰富的交互式 Python 解析器\n- Jupyter Notebook：基于网页的用于交互计算的应用程序\n- Prettytable：生成美观的 ASCII 格式的表格\n- Colorama：让终端具有颜色\n- bashplotlib：在终端中进行基本绘图\n- emoji：支持在 Python 终端输出表情\n- Ipyvolume：在 Jupyter notebook 中可视化 3d 体积和字形\n\n\n\n#### 文本处理\n\n- FlashText：高效的文本查找替换库\n- furl：url 处理库\n- pypinyin：汉字拼音转换工具\n- simplejson：JSON 编 / 解码器\n- JMESPath：JSON 查询语法库\n\n\n\n#### 其他\n\n- Pipenv：Python 官方推荐的新一代包管理工具\n- threading：自带的线程库\n- multiprocessing：自带的多线程库\n- Chardet：字符编码检测器\n\n- logging：日志功能\n- PySnooper：Python 调试工具\n- sphinx：Python 文档生成器\n- pyttsx3：文字转语音库\n- PyWin32：提供和 windows 的交互\n- shortuuid：生成唯一 uuid 的库\n- more-itertools：支持迭代操作对象\n- cryptography：密码学工具包\n\n\n\n### 网络请求 & 解析\n\n- requests：HTTP 请求库\n- aiohttp：异步 HTTP 网络库\n- scrapy：分布式网页采集框架\n- pyspider：一个强大的爬虫系统\n- BeautifulSoup：从 HTML 或 XML 文件中提取数据的库\n- you-get：网页视频下载器\n- wget：网页文件下载\n- musicdl：Python 音乐下载器\n\n\n\n### 文件处理\n\n- openpyxl：Excel 读写库\n- tablib：处理表格数据\n- csvkit：用于转换和操作 CSV 的工具\n- XlsxWriter：操作 Excel\n- python-docx：操作 office word 文档\n- PyPDF2：操作 PDF 文档\n- pdfminer：从 PDF 文档中抽取信息的工具\n- xhtml2pdf：HTML 转 PDF 工具\n- WeasyPrint：可视化网页，并支持导出为 PDF\n- html2text：将 HTML 转换为 Markdown 文档\n- xmltodict：像处理 JSON 一样处理 XML\n- moviepy：基于脚本的视频编辑模块\n- eyeD3：操作音频文件的工具\n- pyAudioAnalysis：音频特征提取分析\n\n\n\n### 界面开发\n\n- pyQT：跨平台的用户界面开发框架\n- Turtle：交互式绘画库\n- pyglet：跨平台界面及多媒体框架\n- wxPython：Python 用户界面开发工具\n- Pygame：一组用来开发游戏的 Python 模块\n- Manim：Python 数学动画引擎\n- progressbar：一个滚动条函数库\n- progress：进度条输出\n- tqdm：快速、可扩展的进度条\n\n\n\n### 测试\n\n- nose：测试框架\n- faker：生成假数据\n- PyAutoGUI：跨平台 GUI 自动测试模块\n- coverage：代码覆盖率测量\n- sqlmap：自动 SQL 注入和渗透测试工具\n\n\n\n### Web 开发\n\n- Django：Python 界最流行的 web 框架\n- Django REST framework：用于开发 web api 的框架\n- FastAPI：快速构建 web 应用程序\n- flask：Python 微型框架\n- Twisted：一个事件驱动的网络引擎\n\n\n\n### 运维\n\n- psutil：跨平台的进程和系统工具模块\n- supervisor：进程控制管理系统\n- sh：让 Python 支持 shell 脚本\n- dnspython：DNS 工具包\n- scapy：数据包处理库\n- pexpect：在伪终端中控制交互程序\n- paramiko：远程连接服务\n- Ansible：IT 自动化平台\n- SaltStack：基础设施自动化和管理系统\n- watchdog：管理文件系统事件的 API 和 shell 工具\n\n\n\n### 图像处理 & 计算机视觉\n\n- Pillow：图像处理库\n- kornia：计算机视觉库\n- Opencv：开源计算机视觉库\n- Mahotas：计算机视觉和图像处理库\n- Luminoth：计算机视觉的深度学习工具集\n\n\n\n### 数据分析 & 数据科学\n\n- NumPy：数值计算工具包\n- Pandas：主流的数据分析工具\n- pyecharts：基于百度 Echarts 的数据可视化库\n- Dash：快速构建 Web 数据可视化应用\n- matplotlib：Python 2D 绘图库\n- Seaborn：使用 Matplotlib 进行统计数据可视化\n- python-recsys：实现推荐系统的库\n- vaex：高速大数据处理库\n- SciPy：算法和数学工具库\n- blaze：NumPy 和 Pandas 的大数据接口\n- statsmodels：统计建模和计量经济学\n\n\n\n### 人工智能\n\n- Tensorflow：谷歌开源的最受欢迎的深度学习框架\n- keras：深度学习封装库，快速上手神经网络\n- Pytorch：具有张量和动态神经网络，并有强大 GPU 加速能力的深度学习框架\n- Caffe2：一个轻量、模块化、可扩展的深度学习框架\n- scikit-learn：基于 SciPy 构建的机器学习 Python 模块\n- PyMC：马尔科夫链蒙特卡洛采样工具\n- mmdetection：深度学习目标检测工具箱\n- imbalanced-learn：不平衡学习工具包\n- XGBoost：分布式梯度增强库\n- Gym：强化学习算法的工具包\n\n\n\n### 自然语言处理\n\n- NLTK：自然语言处理工具包\n- Gensim：话题建模库\n- Pattern：自然语言处理工具\n- fuzzywuzzy：用于字符串模糊匹配、令牌匹配等\n- TextBlob：为进行普通自然语言处理任务提供一致的 API\n- PyFlux：时间序列处理库\n- jieba：中文分词工具\n\n\n\n## 大纲\n\n（大纲图）\n\n\n\n## 岗位\n\n- 腾讯校招 Python 相关岗位：https://join.qq.com/post.html?keyword=python\n- 岗位薪资查询：OfferShow 小程序\n- 运维工程师\n- Web 开发工程师（后端、全栈为主）\n- 测试工程师\n- 数据分析师\n- 产品经理\n- 算法工程师\n  - 机器学习\n  - 计算机视觉\n  - NLP\n  - 多媒体处理\n- 大数据工程师\n  - 大数据开发\n  - 数据挖掘\n- 网络爬虫工程师\n- 技术研究员\n\n\n\n## 资源\n\n### 视频\n\n#### 零基础\n\n- ⭐ 千锋教育 700 集零基础 Python 教程：https://www.bilibili.com/video/BV1R7411F7JV（非常全面，基础、web 开发、爬虫、数据分析、AI 基础都讲了，例子也很丰富）\n- ⭐ 黑马程序员600集 Python 教程：https://www.bilibili.com/video/BV1ex411x7Em（比较全面，基于 Linux 环境学习，以 Python 基础 + 面向对象为重点，还包含一部分游戏开发） \n- ⭐ Python 全栈开发教程：https://www.bilibili.com/video/BV1wD4y1o7AS（很纯粹的 Python 基础教程，案例多，适合快速入门）\n- 小甲鱼 -《零基础入门学习Python》最新版：https://www.bilibili.com/video/av52080698（可惜，更新到一半就没了。。）\n- 【麻省理工学院-中文字幕版】Python 和计算机科学导论公开课：https://www.bilibili.com/video/BV1ty4y1x7xP（适合外语不错的同学课外看，感受国外教学氛围）\n- 阿里云 python 工程师学习：https://developer.aliyun.com/graph/python（有在线编程体验）\n- 鱼皮公众号【程序员鱼皮】后台回复 Python，也有一套视频课\n\n#### 其他\n\n- Web 开发\n\n  - Python Django 项目实战教程：https://www.bilibili.com/video/BV1pq4y1W7a1\n  - Python + 微信小程序实战开发：https://www.bilibili.com/video/BV1Xy4y1s792（挺完整，后台用的 Django 框架）\n\n- 数据结构与算法\n\n  - Python 数据结构与算法全套 100 节：https://www.bilibili.com/video/BV1uA411N7c5\n  - 【北京大学】数据结构与算法Python版（完整版）：https://www.bilibili.com/video/BV1VC4y1x7uv\n\n- 爬虫\n\n  - 2020 年Python爬虫全套课程（学完可做项目）：https://www.bilibili.com/video/BV1Yh411o7Sz\n  - Python 爬虫编程基础 5 天速成：https://www.bilibili.com/video/BV12E411A7ZQ（很短的爬虫实战入门课）\n\n- 数据分析\n\n  - 自学数据分析课程：https://www.bilibili.com/video/BV1ZM4y1u7uF（很纯粹的数据分析 + 可视化课程，适合办公党快速上手）\n  - 完整数据分析课程：https://www.bilibili.com/video/BV1vV411p7D6（数据分析 + 机器学习，很全面）\n  - Python 数据分析入门视频合集：https://shimowendang.com/docs/36pykCPH6XCjKJcv/read\n\n- 其他\n\n  - 一天搞定人脸识别项目（python+opencv）：https://www.bilibili.com/video/BV1Lq4y1Z7dm\n\n  - Python 自动化办公：https://www.bilibili.com/video/BV1uv411W7Fi（主要是处理 Excel）\n\n    \n\n### 书籍\n\n- ⭐《Python编程：从入门到实践》：https://www.code-nav.cn/rd/?rid=cbddf0af6064484f002658102cdbba17\n- 《python学习手册》：https://www.code-nav.cn/rd/?rid=79550af260643c8e0ce47ab84633e200\n- 《笨办法学Python3》：https://www.code-nav.cn/rd/?rid=b00064a760643bb90cbba72836995fd5\n- 《Python编程快速上手》（第2版）：https://book.douban.com/subject/35387685/\n- 《Python Cookbook 中文版》（第3版）：https://book.douban.com/subject/26381341/\n- 《父与子的编程之旅》：https://www.code-nav.cn/rd/?rid=8937eaa9615519680ed81c0e3165ee65\n- ⭐《Python 深度学习》https://www.code-nav.cn/rd/?rid=2d44d6c261624dd31224ed1b5841920c\n- 《Python网络爬虫实战》第2版：https://www.code-nav.cn/rd/?rid=b00064a7606440d40cbc2fca19192e4f\n- 《Python数据科学手册》：https://book.douban.com/subject/27667378/\n- 《利用Python进行数据分析》：https://book.douban.com/subject/25779298/\n- 《轻量级Django》：https://www.code-nav.cn/rd/?rid=28ee4e3e60641fd60d91fd2441418491\n- ⭐ **编程导航 - 超多 Python 书籍直接免费下载** ：https://www.code-nav.cn/topic/Python（选择书籍标签）\n- Python Guide（英文）：https://docs.python-guide.org/\n\n\n\n### 文档\n\n- ⭐ Python 入门教程（菜鸟教程）：https://www.runoob.com/python3/python3-tutorial.html（可以在线写代码练习）\n- Python 入门教程（W3Cschool）：https://www.w3cschool.cn/python3/（支持手机阅读）\n- Python 中文学习大本营：http://www.pythondoc.com/（一系列文档教程的集合）\n- Python 100 天：https://github.com/jackfrued/Python-100-Days\n- 廖雪峰 Python 入门教程：https://www.liaoxuefeng.com/wiki/1016959663602400\n- 莫烦 Python 教程：https://mofanpy.com/（包括基础、数据处理、机器学习等，部分内容有视频）\n- Django 官方教程：https://docs.djangoproject.com/zh-hans/3.2/intro/tutorial01/\n- Manim 动画引擎教程：https://docs.manim.org.cn/shaders/\n- A Byte of Python：https://python.swaroopch.com/（Python 英文入门教程）\n- ⭐ 谷歌 Python 代码规范：https://google.github.io/styleguide/pyguide.html\n\n\n\n### 实战\n\n- ⭐ 蓝桥云课 Python 实战合集：https://www.lanqiao.cn/courses/?fee=free&tag=Python\n- 腾讯云在线 Python 实验：https://cloud.tencent.com/developer/labs/gallery?tagId=23\n- 阿里云 Python 入门实验：https://developer.aliyun.com/adc/scenario/e04fe73ad95d4782aef7aecca206196e\n- 华为云沙箱实验室：https://lab.huaweicloud.com/testList.html\n- Python123：https://python123.io/index（在线编程，部分课收费）\n- CheckiO 游戏学 Python：https://py.checkio.org/\n- 通过测试交互式学 Python（英文）：https://github.com/gregmalcolm/python_koans\n- 交互式 Python 挑战（英文）：https://github.com/donnemartin/interactive-coding-challenges\n- 通过项目学 Python（英文）：https://github.com/practical-tutorials/project-based-learning#python\n- 通过示例交互式学 Python（英文）：https://github.com/jerry-git/learn-python3\n\n\n\n### 代码\n\n- 数据结构和算法 Python 实现：https://github.com/keon/algorithms\n- 《剑指 Offer》算法面试题 Python 实现：https://github.com/JushuangQiao/Python-Offer\n- 设计模式 Python 实现：http://www.pythontip.com/python-patterns/detail/abstract_factory\n- Python Machine Learning 代码：https://github.com/rasbt/python-machine-learning-book-3rd-edition\n- Python 小脚本：https://github.com/RealHacker/python-gems\n\n\n\n### 合集\n\n- ⭐ GitHub Python 专区：https://github.com/topics/python\n- 神经网络和深度学习相关框架：https://github.com/ChristosChristofidis/awesome-deep-learning\n- 机器学习相关库：https://github.com/josephmisiti/awesome-machine-learning#python\n- 开源 Python 应用程序大全：https://github.com/mahmoud/awesome-python-applications\n- Python 类库大全：https://github.com/vinta/awesome-python\n- Python 类库大全（中文版）：https://github.com/jobbole/awesome-python-cn\n- Python 异步大全：https://github.com/timofurrer/awesome-asyncio\n- jupyter 相关：https://github.com/markusschanta/awesome-jupyter\n- Python 书单：https://github.com/Junnplus/awesome-python-books\n- Python 书单（中文版）：https://github.com/jobbole/awesome-python-books\n\n- StackOverflow Python 专区：https://stackoverflow.com/questions/tagged/python（解决问题必备）\n- ⭐ 掘金 Python 专区：https://juejin.cn/tag/Python（看技术文章）\n\n\n\n### 社区\n\n- ⭐ PythonTab：https://www.pythontab.com/（中文 Python 开发者社区）\n- Learnku Python 技术论坛：https://learnku.com/python\n- 开源中国：https://www.oschina.net/（综合的开源社区）\n\n\n\n### 工具\n\n- ⭐ Python 在线编程（菜鸟教程）：https://c.runoob.com/compile/6/\n- 腾讯云 Python 在线手册：https://cloud.tencent.com/developer/devdocs\n- Python 在线手册汇总：https://docs.pythontab.com/\n\n\n\n### 面试题\n\n- ⭐ 牛客 Python 专项练习：https://www.nowcoder.com/intelligentTest\n- 牛客 Python 试题：https://www.nowcoder.com/search?query=python&type=question\n- 牛客机器学习面试题：https://www.nowcoder.com/search?type=question&query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\n- 牛客机器学习笔试：https://www.nowcoder.com/search?type=paper&query=%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0\n- Python 面试题整理：https://github.com/taizilongxu/interview_python（高星）\n- Python 面试题整理：https://github.com/kenwoodjw/python_interview_question\n- 机器学习面试题：https://geektutu.com/post/qa-ml.html\n\n\n\n### 其他\n\n- ⭐ Python 常见问题：https://docs.python.org/zh-cn/3/faq/general.html（官方提供的 ）\n- GitHub Python 趋势：https://github.com/trending/python\n- Python 模块推荐：https://pymotw.com/3/\n- Python 练习册：https://github.com/Yixiaohan/show-me-the-code（一些 Python 练习题目）\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 2,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 999,
        "userId": "1601072287388278786",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-03-28T05:28:38.000+00:00",
        "updateTime": "2023-03-28T05:39:34.000+00:00",
        "user": {
          "id": "1601072287388278786",
          "planetCode": "1",
          "userName": "程序员鱼皮",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1601072287388278786/9vqTr3HM-WechatIMG1287.jpeg",
          "gender": 1,
          "userProfile": "这个网站的老大",
          "userRole": "admin",
          "interests": [
            "C++",
            "Java",
            "Python",
            "算法"
          ],
          "place": "上海",
          "birthday": "1998-11-03",
          "school": "东华大学",
          "major": "网络工程",
          "education": null,
          "graduationYear": 2020,
          "jobStatus": null,
          "company": null,
          "job": null,
          "workYear": 2,
          "direction": "后端",
          "goal": null,
          "github": "https://github.com/liyupi",
          "blog": "https://yupi.icu",
          "score": 675,
          "coin": 170,
          "followeeNum": 301,
          "followNum": 5,
          "followStatus": null,
          "vipExpireTime": "2025-12-13T05:00:02.000+00:00",
          "lastLoginTime": null,
          "createTime": "2022-12-09T04:32:33.000+00:00",
          "updateTime": "2023-03-28T07:30:32.000+00:00"
        },
        "tags": [
          "文章",
          "学习路线",
          "Python",
          "教程"
        ],
        "fileList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "25",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "3"
  },
  "message": "ok"
}